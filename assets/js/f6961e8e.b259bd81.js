"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[4877],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>c});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),g=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=g(e.components);return a.createElement(p.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=g(t),y=r,c=s["".concat(p,".").concat(y)]||s[y]||u[y]||l;return t?a.createElement(c,i(i({ref:n},d),{},{components:t})):a.createElement(c,i({ref:n},d))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=y;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var g=2;g<l;g++)i[g]=t[g];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>g});var a=t(8168),r=(t(6540),t(5680));const l={title:"JavaScript"},i=void 0,o={unversionedId:"sdks/javascript",id:"sdks/javascript",title:"JavaScript",description:"If you're using React, consider using our [React Client] instead.",source:"@site/docs/sdks/javascript.md",sourceDirName:"sdks",slug:"/sdks/javascript",permalink:"/docs/sdks/javascript",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/sdks/javascript.md",tags:[],version:"current",frontMatter:{title:"JavaScript"},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/docs/sdks/java"},next:{title:"Node",permalink:"/docs/sdks/node/"}},p={},g=[{value:"Install the latest version",id:"install-the-latest-version",level:2},{value:"Initialize the client",id:"initialize-the-client",level:2},{value:"Feature Flags",id:"feature-flags",level:2},{value:"Context",id:"context",level:2},{value:"<code>poll()</code>",id:"poll",level:2},{value:"Dynamic Config",id:"dynamic-config",level:2},{value:"Dynamic Logging",id:"dynamic-logging",level:2},{value:"Tracking Experiment Exposures",id:"tracking-experiment-exposures",level:2},{value:"Telemetry",id:"telemetry",level:2},{value:"Testing",id:"testing",level:2},{value:"Reference",id:"reference",level:2},{value:"<code>prefab</code> Properties",id:"prefab-properties",level:3}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},s=d("Tabs"),u=d("TabItem"),y={toc:g},c="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"If you're using React, consider using our ",(0,r.yg)("a",{parentName:"p",href:"/docs/sdks/react"},"React Client")," instead.")),(0,r.yg)("h2",{id:"install-the-latest-version"},"Install the latest version"),(0,r.yg)("p",null,"Use your favorite package manager to install ",(0,r.yg)("inlineCode",{parentName:"p"},"@prefab-cloud/prefab-cloud-js")," ",(0,r.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@prefab-cloud/prefab-cloud-js"},"npm")," | ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/prefab-cloud/prefab-cloud-js"},"github")),(0,r.yg)(s,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(u,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @prefab-cloud/prefab-cloud-js\n")),(0,r.yg)("p",null,"TypeScript types are included with the package.")),(0,r.yg)(u,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add @prefab-cloud/prefab-cloud-js\n")),(0,r.yg)("p",null,"TypeScript types are included with the package.")),(0,r.yg)(u,{value:"script",label:"<script> tag",mdxType:"TabItem"},(0,r.yg)("p",null,"We recommend using ",(0,r.yg)("a",{parentName:"p",href:"https://www.jsdelivr.com/package/npm/@prefab-cloud/prefab-cloud-js"},"jsDelivr")," for a minified/bundled version."),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{href:"#context"},"context")," section for more information on how to initialize with the ",(0,r.yg)("inlineCode",{parentName:"p"},"<script>")," tag."))),(0,r.yg)("h2",{id:"initialize-the-client"},"Initialize the client"),(0,r.yg)("p",null,"Initialize ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab")," with your api key:"),(0,r.yg)(s,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(u,{value:"import",label:"import",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'import { prefab } from "@prefab-cloud/prefab-cloud-js";\n\nconst options = {\n  apiKey: "YOUR_CLIENT_API_KEY",\n};\n\nawait prefab.init(options);\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"prefab.init")," will request the calculated feature flags for the provided context as a single HTTPS request. If you need to check for updates to feature flag values, you can ",(0,r.yg)("a",{parentName:"p",href:"#poll"},"learn more about polling")," below."),(0,r.yg)("p",null,"You aren't required to ",(0,r.yg)("inlineCode",{parentName:"p"},"await")," the ",(0,r.yg)("inlineCode",{parentName:"p"},"init")," -- it is a promise, so you can use ",(0,r.yg)("inlineCode",{parentName:"p"},".then"),", ",(0,r.yg)("inlineCode",{parentName:"p"},".finally"),", ",(0,r.yg)("inlineCode",{parentName:"p"},".catch"),", etc. instead if you prefer.")),(0,r.yg)(u,{value:"script",label:"<script> tag",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'// `prefab` is available globally on the window object\nconst options = {\n  apiKey: "YOUR_CLIENT_API_KEY",\n};\n\nprefab.init(options).then(() => {\n  console.log(options);\n  console.log("test-flag is " + prefab.isEnabled("test-flag"));\n});\n')))),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"While ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab")," is loading, ",(0,r.yg)("inlineCode",{parentName:"p"},"isEnabled")," will return ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"get")," will return ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"shouldLog")," will use your ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultLevel"),".")),(0,r.yg)("h2",{id:"feature-flags"},"Feature Flags"),(0,r.yg)("p",null,"Now you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab"),"'s feature flag evaluation, e.g."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"if (prefab.isEnabled('cool-feature') {\n  // ... this code only evaluates if `cool-feature` is enabled for the current context\n}\n")),(0,r.yg)("p",null,"You can also use ",(0,r.yg)("inlineCode",{parentName:"p"},"get")," to access the value of non-boolean flags"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'const stringValue = prefab.get("my-string-flag");\n')),(0,r.yg)("h2",{id:"context"},"Context"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Context")," accepts an object with keys that are context names and key value pairs with attributes describing the context. You can use this to write targeting rules, e.g. ",(0,r.yg)("a",{parentName:"p",href:"/docs/explanations/features/rules-and-segmentation"},"segment")," your users."),(0,r.yg)(s,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(u,{value:"import",label:"import",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'// highlight-next-line\nimport { prefab, Context } from "@prefab-cloud/prefab-cloud-js";\n\nconst options = {\n  apiKey: "YOUR_CLIENT_API_KEY",\n  // highlight-start\n  context: new Context({\n    user: { key: "abcdef", email: "test@example.com" },\n    device: { key: "hijklm", mobile: true },\n  }),\n  // highlight-end\n};\n\nawait prefab.init(options);\n'))),(0,r.yg)(u,{value:"script",label:"<script> tag",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'// `prefab` is available globally on the window object\n// `Context` is available globally as `window.prefabNamespace.Context`\nconst options = {\n  apiKey: "YOUR_CLIENT_API_KEY",\n  // highlight-start\n  context: new prefabNamespace.Context({\n    user: {\n      email: "test@example.com",\n    },\n    device: { mobile: true },\n  }),\n  // highlight-end\n};\n\nprefab.init(options).then(() => {\n  console.log(options);\n  console.log("test-flag is " + prefab.isEnabled("test-flag"));\n\n  console.log("ex1-copywrite " + prefab.get("ex1-copywrite"));\n  $(".copywrite").text(prefab.get("ex1-copywrite"));\n});\n')))),(0,r.yg)("h2",{id:"poll"},(0,r.yg)("inlineCode",{parentName:"h2"},"poll()")),(0,r.yg)("p",null,"After ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab.init()"),", you can start polling. Polling uses the context you defined in ",(0,r.yg)("inlineCode",{parentName:"p"},"init")," by default. You can update the context for future polling by setting it on the ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab")," object."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"// some time after init\nprefab.poll({ frequencyInMs: 300000 });\n\n// we're now polling with the context used from `init`\n\n// later, perhaps after a visitor logs in and now you have the context of\n// their current user\nprefab.updateContext({\n  ...prefab.context,\n  user: { email: user.email, key: user.trackingId },\n});\n\n// updateContext will immediately load the newest from Prefab based on the\n// new context. Future polling will use the new context as well.\n")),(0,r.yg)("h2",{id:"dynamic-config"},"Dynamic Config"),(0,r.yg)("p",null,"Config values are accessed the same way as feature flag values. You can use ",(0,r.yg)("inlineCode",{parentName:"p"},"isEnabled")," as a convenience for boolean values, and ",(0,r.yg)("inlineCode",{parentName:"p"},"get")," works for all data types."),(0,r.yg)("p",null,'By default configs are not sent to client SDKs. You must enable access for each individual config. You can do this by checking the "Send to client SDKs" checkbox when creating or editing a config.'),(0,r.yg)("h2",{id:"dynamic-logging"},"Dynamic Logging"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"shouldLog")," allows you to implement dynamic logging. It takes the following properties:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"property"),(0,r.yg)("th",{parentName:"tr",align:null},"type"),(0,r.yg)("th",{parentName:"tr",align:null},"example"),(0,r.yg)("th",{parentName:"tr",align:null},"case-sensitive"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"loggerName")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"my.corp.widgets.modal"),(0,r.yg)("td",{parentName:"tr",align:null},"Yes")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"desiredLevel")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"INFO"),(0,r.yg)("td",{parentName:"tr",align:null},"No")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"defaultLevel")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"ERROR"),(0,r.yg)("td",{parentName:"tr",align:null},"No")))),(0,r.yg)("p",null,"If you've configured a level value for ",(0,r.yg)("inlineCode",{parentName:"p"},"loggerName"),' (or a parent in the dot-notation hierarchy like "my.corp.widgets") then that value will be used for comparison against the ',(0,r.yg)("inlineCode",{parentName:"p"},"desiredLevel"),". If no configured level is found in the hierarchy for ",(0,r.yg)("inlineCode",{parentName:"p"},"loggerName")," then the provided ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultLevel")," will be compared against ",(0,r.yg)("inlineCode",{parentName:"p"},"desiredLevel"),"."),(0,r.yg)("p",null,"If ",(0,r.yg)("inlineCode",{parentName:"p"},"desiredLevel")," is greater than or equal to the comparison severity, then ",(0,r.yg)("inlineCode",{parentName:"p"},"shouldLog")," returns true. If the ",(0,r.yg)("inlineCode",{parentName:"p"},"desiredLevel")," is less than the comparison severity, then ",(0,r.yg)("inlineCode",{parentName:"p"},"shouldLog")," will return false."),(0,r.yg)("p",null,"Example usage:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'const desiredLevel = "info";\nconst defaultLevel = "error";\nconst loggerName = "my.corp.widgets.modal";\n\nif (shouldLog({ loggerName, desiredLevel, defaultLevel })) {\n  console.info("...");\n}\n')),(0,r.yg)("p",null,'If no log level value is configured in Prefab for "my.corp.widgets.modal" or higher in the hierarchy, then the ',(0,r.yg)("inlineCode",{parentName:"p"},"console.info")," will not happen. If the value is configured and is INFO or more verbose, the ",(0,r.yg)("inlineCode",{parentName:"p"},"console.info")," will happen."),(0,r.yg)("h2",{id:"tracking-experiment-exposures"},"Tracking Experiment Exposures"),(0,r.yg)("p",null,"If you're using ",(0,r.yg)("a",{parentName:"p",href:"/docs/how-tos/experiment"},"Prefab for A/B testing"),", you can supply code for tracking experiment exposures to your data warehouse or analytics tool of choice."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'import { prefab, Context } from "@prefab-cloud/prefab-cloud-js";\n\nconst options = {\n  apiKey: "YOUR_CLIENT_API_KEY",\n  context: new Context({\n    user: { key: "abcdef", email: "test@example.com" },\n    device: { key: "hijklm", mobile: true },\n  }),\n  // highlight-start\n  afterEvaluationCallback: (key, value) => {\n    // call your analytics tool here...in this example we are sending data to posthog\n    window.posthog?.capture("Feature Flag Evaluation", {\n      key,\n      value,\n    });\n  },\n  // highlight-end\n};\n\nawait prefab.init(options);\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"afterEvaluationCallback")," will be called each time you evaluate a feature flag or config using ",(0,r.yg)("inlineCode",{parentName:"p"},"get")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"isEnabled"),"."),(0,r.yg)("h2",{id:"telemetry"},"Telemetry"),(0,r.yg)("p",null,"By default, Prefab will collect summary counts of config and feature flag evaluations to help you understand how your configs and flags are being used in the real world. You can opt out of this behavior by passing ",(0,r.yg)("inlineCode",{parentName:"p"},"collectEvaluationSummaries: false")," in the options to ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab.init"),"."),(0,r.yg)("p",null,"Prefab also stores the context that you pass in. The context keys are used to power autocomplete in the rule editor, and the individual values power the Contexts page for troubleshooting targeting rules and individual flag overrides. If you want to change what Prefab stores, you can pass a different value for ",(0,r.yg)("inlineCode",{parentName:"p"},"collectContextMode"),"."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"th"},"collectContextMode")," value"),(0,r.yg)("th",{parentName:"tr",align:null},"Behavior"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"PERIODIC_EXAMPLE")),(0,r.yg)("td",{parentName:"tr",align:null},"Stores context values and context keys. This is the default.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"SHAPE_ONLY")),(0,r.yg)("td",{parentName:"tr",align:null},"Stores context keys only.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"NONE")),(0,r.yg)("td",{parentName:"tr",align:null},"Stores nothing. Context will only be used for rule evaluation.")))),(0,r.yg)("h2",{id:"testing"},"Testing"),(0,r.yg)("p",null,"In your test suite, you should skip ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab.init")," altogether and instead use ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab.setConfig")," to set up your test state."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'it("shows the turbo button when the feature is enabled", () => {\n  prefab.setConfig({\n    turbo: true,\n    defaultMediaCount: 3,\n  });\n\n  const rendered = new MyComponent().render();\n\n  expect(rendered).toMatch(/Enable Turbo/);\n  expect(rendered).toMatch(/Media Count: 3/);\n});\n')),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("h3",{id:"prefab-properties"},(0,r.yg)("inlineCode",{parentName:"h3"},"prefab")," Properties"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"property"),(0,r.yg)("th",{parentName:"tr",align:null},"example"),(0,r.yg)("th",{parentName:"tr",align:null},"purpose"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"isEnabled")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},'prefab.isEnabled("new-logo")')),(0,r.yg)("td",{parentName:"tr",align:null},"returns a boolean (default ",(0,r.yg)("inlineCode",{parentName:"td"},"false"),") if a feature is enabled based on the current context")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"get")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"prefab.get('retry-count')")),(0,r.yg)("td",{parentName:"tr",align:null},"returns the value of a flag or config evaluated in the current context")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"loaded")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"if (prefab.loaded) { ... }")),(0,r.yg)("td",{parentName:"tr",align:null},"a boolean indicating whether prefab content has loaded")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"shouldLog")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"if (prefab.shouldLog(...)) {")),(0,r.yg)("td",{parentName:"tr",align:null},"returns a boolean indicating whether the proposed log level is valid for the current context")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"poll")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"prefab.poll({frequencyInMs})")),(0,r.yg)("td",{parentName:"tr",align:null},"starts polling every ",(0,r.yg)("inlineCode",{parentName:"td"},"frequencyInMs")," ms.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"stopPolling")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"prefab.stopPolling()")),(0,r.yg)("td",{parentName:"tr",align:null},"stops the polling process")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"context")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"prefab.context")),(0,r.yg)("td",{parentName:"tr",align:null},"get the current context (after ",(0,r.yg)("inlineCode",{parentName:"td"},"init()"),").")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"updateContext")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"prefab.updateContext(newContext)")),(0,r.yg)("td",{parentName:"tr",align:null},"update the context and refetch. Pass ",(0,r.yg)("inlineCode",{parentName:"td"},"false")," as a second argument to skip refetching")))))}m.isMDXComponent=!0}}]);