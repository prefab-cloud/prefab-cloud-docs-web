"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[1699],{1178:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>d});var s=r(4848),o=r(8453);const t={title:"Node"},l=void 0,i={id:"sdks/node/node",title:"Node",description:"Install the Latest Version",source:"@site/docs/sdks/node/node.md",sourceDirName:"sdks/node",slug:"/sdks/node/",permalink:"/docs/sdks/node/",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/sdks/node/node.md",tags:[],version:"current",frontMatter:{title:"Node"},sidebar:"tutorialSidebar",previous:{title:"JavaScript",permalink:"/docs/sdks/javascript"},next:{title:"Netlify",permalink:"/docs/sdks/node/netlify"}},a={},d=[{value:"Install the Latest Version",id:"install-the-latest-version",level:2},{value:"Initialize a Client",id:"initialize-a-client",level:2},{value:"Feature Flags and Dynamic Config",id:"feature-flags-and-dynamic-config",level:2},{value:"Context",id:"context",level:2},{value:"Dynamic Logging",id:"dynamic-logging",level:2},{value:"Reference",id:"reference",level:2},{value:"Option Definitions",id:"option-definitions",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components},{TabItem:r,Tabs:t}=n;return r||p("TabItem",!0),t||p("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"install-the-latest-version",children:"Install the Latest Version"}),"\n",(0,s.jsxs)(t,{groupId:"lang",children:[(0,s.jsx)(r,{value:"npm",label:"npm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @prefab-cloud/prefab-cloud-node\n"})})}),(0,s.jsx)(r,{value:"yarn",label:"yarn",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn add @prefab-cloud/prefab-cloud-node\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"initialize-a-client",children:"Initialize a Client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { Prefab } from "@prefab-cloud/prefab-cloud-node";\n\nif (!process.env.PREFAB_API_KEY) {\n  throw new Error("PREFAB_API_KEY is not set");\n}\n\nconst prefab = new Prefab({\n  apiKey: process.env.PREFAB_API_KEY,\n  enableSSE: true,\n  defaultLogLevel: "warn",\n});\n\nawait prefab.init();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"feature-flags-and-dynamic-config",children:"Feature Flags and Dynamic Config"}),"\n",(0,s.jsx)(n.p,{children:"After the init completes you can use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prefab.isFeatureEnabled('some.feature.name')"})," returns true or false"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prefab.get('some.config.name')"})," returns a raw value"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,s.jsxs)(n.p,{children:["Prefab supports ",(0,s.jsx)(n.a,{href:"/docs/explanations/concepts/context",children:"context"})," for intelligent rule-based evaluation of ",(0,s.jsx)(n.code,{children:"get"})," and ",(0,s.jsx)(n.code,{children:"isFeatureEnabled"})," based on the current request/device/user/etc."]}),"\n",(0,s.jsx)(n.p,{children:"Given"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const context = {\n  user: { key: "some-unique-identifier", country: "US" },\n  subscription: { key: "pro-sub", plan: "pro" },\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can pass this in to each call"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"prefab.get('some.config.name', context, defaultValue)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"prefab.isFeatureEnabled('some.feature.name', context, false)"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Or you can set the context in a block (perhaps surrounding evaluation of a web request)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'prefab.inContext(context, (pf) => {\n  const optionalJustInTimeContext = { ... }\n\n  console.log(pf.get("some.config.name", optionalJustInTimeContext, defaultValue))\n  console.log(pf.isEnabled("some.config.name", optionalJustInTimeContext, false))\n})\n'})}),"\n",(0,s.jsx)(n.h2,{id:"dynamic-logging",children:"Dynamic Logging"}),"\n",(0,s.jsxs)(n.p,{children:["The node ecosystem has a vast landscape of logging libraries. Rather than making an opinionated choice about which logger you should use, Prefab provides both a simple ",(0,s.jsx)(n.code,{children:"console.log"})," wrapper and a way to integrate with your existing logger."]}),"\n",(0,s.jsxs)(t,{groupId:"logging",children:[(0,s.jsxs)(r,{value:"console.log",label:"console.log/STDOUT is my thing",children:[(0,s.jsxs)(n.p,{children:["If you're logging to STDOUT (e.g. ",(0,s.jsx)(n.code,{children:"console.log"}),") we provide ",(0,s.jsx)(n.code,{children:"prefab.logger"})," for convenience."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// Provide a meaningful logger name and default level\nconst logger = prefab.logger("express.example.app.users-path", "warn");\n\n// simple info logging\nlogger.info(`getting results for ${userId}`);\n'})}),(0,s.jsx)(n.p,{children:"You can provide the context to the logger as well (for evaluating dynamic log level rules)"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'logger.info(\n  "express.example.app.users-path",\n  "doing something complicated...",\n  { user: { key: userId } },\n);\n'})}),(0,s.jsxs)(n.p,{children:["Or, using the ",(0,s.jsx)(n.code,{children:"inContext"})," block:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const prefabContext = { user: { key: userId } };\n\n// ... later in your code\nprefab.inContext(prefabContext, (prefab) => {\n  const logger = prefab.logger("express.example.app.users-path", "warn");\n\n  logger.info(`doing something complicated...`);\n});\n'})})]}),(0,s.jsxs)(r,{value:"I have a preferred logger",label:"I have a preferred logger",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"prefab.shouldLog({loggerName, desiredLevel, defaultLevel, contexts})"})," returns true or false"]}),(0,s.jsx)(n.p,{children:"You can use this to wrap your existing logging calls. Example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const defaultLevel = "warn";\n\nmyLogger.info = (loggerName, msg, context) => {\n  if (\n    prefab.shouldLog({\n      loggerName,\n      defaultLevel,\n      desiredLevel: "info",\n      contexts: context,\n    })\n  ) {\n    // Now you call the underlying method on your preferred logger\n    myPreferredLoggerLibrary.info(msg);\n  }\n};\n\n// repeat for debug, warn, error, etc.\n'})}),(0,s.jsx)(n.p,{children:"Example invocation:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'myLogger.info(\n  "express.example.app.users-path",\n  "doing something complicated...",\n  { user: { key: userId } },\n);\n'})}),(0,s.jsxs)(n.p,{children:["Or, using the ",(0,s.jsx)(n.code,{children:"inContext"})," block:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const prefabContext = { user: { key: userId } };\n\n// ... later in your code\nprefab.inContext(prefabContext, (prefab) => {\n  myLogger.info(\n    "express.example.app.users-path",\n    "doing something complicated",\n  );\n});\n'})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,s.jsx)(n.h3,{id:"option-definitions",children:"Option Definitions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Default"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"collectEvaluationSummaries"}),(0,s.jsx)(n.td,{children:"Send counts of config/flag evaluation results back to Prefab to view in web app"}),(0,s.jsx)(n.td,{children:"true"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"collectLoggerCounts"}),(0,s.jsx)(n.td,{children:"Send counts of logger usage back to Prefab to power log-levels configuration screen"}),(0,s.jsx)(n.td,{children:"true"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"contextUploadMode"}),(0,s.jsx)(n.td,{children:'Upload either context "shapes" (the names and data types your app uses in prefab contexts) or periodically send full example contexts'}),(0,s.jsx)(n.td,{children:'"periodicExample"'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"defaultLevel"}),(0,s.jsxs)(n.td,{children:["Level to be used as the min-verbosity for a ",(0,s.jsx)(n.code,{children:"loggerPath"})," if no value is configured in Prefab"]}),(0,s.jsx)(n.td,{children:'"warn"'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enableSSE"}),(0,s.jsx)(n.td,{children:"Whether or not we should listen for live changes from Prefab"}),(0,s.jsx)(n.td,{children:"true"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enablePolling"}),(0,s.jsx)(n.td,{children:"Whether or not we should poll for changes from Prefab"}),(0,s.jsx)(n.td,{children:"false"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var s=r(6540);const o={},t=s.createContext(o);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);