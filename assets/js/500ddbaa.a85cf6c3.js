"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[2060],{3469:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=i(4848),r=i(8453);const s={title:"Tracking IDs",sidebar_label:"Tracking IDs"},o=void 0,a={id:"how-tos/tracking-ids",title:"Tracking IDs",description:"An Opinionated Guide to Identifying Users",source:"@site/docs/how-tos/tracking-ids.md",sourceDirName:"how-tos",slug:"/how-tos/tracking-ids",permalink:"/docs/how-tos/tracking-ids",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/how-tos/tracking-ids.md",tags:[],version:"current",frontMatter:{title:"Tracking IDs",sidebar_label:"Tracking IDs"},sidebar:"tutorialSidebar",previous:{title:"Rollouts",permalink:"/docs/how-tos/rollouts"},next:{title:"Tools",permalink:"/docs/category/tools"}},d={},c=[{value:"An Opinionated Guide to Identifying Users",id:"an-opinionated-guide-to-identifying-users",level:2},{value:"Adding a tracking ID to a Rails application",id:"adding-a-tracking-id-to-a-rails-application",level:2}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components},{TabItem:i,Tabs:s}=n;return i||g("TabItem",!0),s||g("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"an-opinionated-guide-to-identifying-users",children:"An Opinionated Guide to Identifying Users"}),"\n",(0,t.jsxs)(n.p,{children:["If you are only concerned with logged-in users, your ",(0,t.jsx)(n.code,{children:"user.id"})," will work just fine as the sticky property for roll-outs."]}),"\n",(0,t.jsx)(n.p,{children:'If you are working with users as they transition from anonymous to logged-in users however, we need a value that will persist across this transition.\nIf we don\'t keep this value consistent, we will run into situations where a new user lands on our site and gets the "Control" variant of an experiment,\nthen logs in and is thrown into a different variant.'}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Prefab's recommendation is that you create a separate tracking ID the moment you see a request, save it in a cookie and then persist it\nto the user record upon creation."})}),"\n",(0,t.jsx)(s,{groupId:"lang",children:(0,t.jsxs)(i,{value:"ruby",label:"Ruby",children:[(0,t.jsx)(n.h2,{id:"adding-a-tracking-id-to-a-rails-application",children:"Adding a tracking ID to a Rails application"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"rails g migration AddTrackingId\n"})}),(0,t.jsx)(n.p,{children:"Migration to add a column and initialize it."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'class AddTrackingId < ActiveRecord::Migration[7.0]\n  def change\n    add_column :users, :tracking_id, :string\n    execute "update users set tracking_id = id" # initialize pre-existing users to have a tracking_id == their user_id\n    change_column :users, :tracking_id, :string, null: false\n  end\nend\n'})}),(0,t.jsxs)(n.p,{children:["Useful to always have ",(0,t.jsx)(n.code,{children:"@tracking_id"})," available in our controllers."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class ApplicationController < ActionController::Base\n  before_action :set_tracking_id\n  def set_tracking_id\n    @tracking_id = TrackingId.build(user: current_user, cookies: cookies)\n  end\nend\n"})}),(0,t.jsx)(n.p,{children:"TrackingId looks at the (possibly nil) user and cookies and gets us the correct tracking_id while setting it as a long-lived cookie."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'class TrackingId\n  COOKIE_KEY = "tid".freeze\n\n  def self.build(user:, cookies:)\n    builder = new(user, cookies)\n    builder.persist_to_cookies\n    builder.tracking_id\n  end\n\n  def initialize(user = nil, cookies = {})\n    @user = user\n    @cookies = cookies\n  end\n  def tracking_id\n    @tracking_id ||= user_tracking_id || cookie_tracking_id || self.class.new_tracking_id\n  end\n\n  def persist_to_cookies\n    @cookies[COOKIE_KEY] = {\n      value: tracking_id,\n      expires: 1.year.from_now\n    }\n  end\n\n  private\n\n  def user_tracking_id\n    @user.try(:tracking_id)\n  end\n\n  def cookie_tracking_id\n    return if @cookies[COOKIE_KEY].blank?\n    @cookies[COOKIE_KEY]\n  end\n\n  def self.new_tracking_id\n    SecureRandom.uuid\n  end\nend\n'})}),(0,t.jsx)(n.p,{children:"When a user signs up and created an account, we need to remember to permanently set the tracking ID on the user account."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class RegistrationsController < Devise::RegistrationsController\n  def sign_up_params\n    devise_parameter_sanitizer.sanitize(:sign_up).merge(tracking_id: TrackingId.build(user: current_user, cookies: cookies))\n  end\nend\n"})})]})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}function g(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);