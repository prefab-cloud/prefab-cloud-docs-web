"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[5050],{4289:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(4848),a=n(8453);const o={title:"Feature Opt-In",sidebar_label:"Feature Opt-In"},s=void 0,i={id:"how-tos/feature-opt-in",title:"Feature Opt-In",description:"You've built a new feature and you're ready to ship it. How do you make sure it's ready for your users?",source:"@site/docs/how-tos/feature-opt-in.md",sourceDirName:"how-tos",slug:"/how-tos/feature-opt-in",permalink:"/docs/how-tos/feature-opt-in",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/how-tos/feature-opt-in.md",tags:[],version:"current",frontMatter:{title:"Feature Opt-In",sidebar_label:"Feature Opt-In"},sidebar:"tutorialSidebar",previous:{title:"Experiments",permalink:"/docs/how-tos/experiment"},next:{title:"Offline Mode",permalink:"/docs/how-tos/offline-mode"}},l={},c=[{value:"1. How do we know who to enable the feature for?",id:"1-how-do-we-know-who-to-enable-the-feature-for",level:3},{value:"2. Persist this information",id:"2-persist-this-information",level:3},{value:"3. Send this Context to Prefab for evaluation",id:"3-send-this-context-to-prefab-for-evaluation",level:3},{value:"4. Configure our flag to respect this preference",id:"4-configure-our-flag-to-respect-this-preference",level:3},{value:"Putting it all together",id:"putting-it-all-together",level:2},{value:"Note",id:"note",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{Details:o}=t;return o||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"You've built a new feature and you're ready to ship it. How do you make sure it's ready for your users?"}),"\n",(0,r.jsx)(t.p,{children:"Test internally of course!"}),"\n",(0,r.jsxs)(t.p,{children:["So first you get the VP of Sales to signup for a Prefab account and then... Clearly that's not going to work. How can we ",(0,r.jsx)(t.strong,{children:"easily"})," let end users opt-in to a feature?"]}),"\n",(0,r.jsx)(t.p,{children:"There are a few parts to the problem:"}),"\n",(0,r.jsx)(t.h3,{id:"1-how-do-we-know-who-to-enable-the-feature-for",children:"1. How do we know who to enable the feature for?"}),"\n",(0,r.jsx)(t.p,{children:"The way I like to do this is to have a magic URL parameter that is clear, copy-pasteable and obviously editable."}),"\n",(0,r.jsxs)(t.p,{children:["Let's support ",(0,r.jsx)(t.code,{children:"example.com/?features[v2-beta]=true"}),". If we Slack the VP of Sales a link with this in it, it should automatically put them in the beta group. If they want to get back out, they can just change the ",(0,r.jsx)(t.code,{children:"true"})," to ",(0,r.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,r.jsxs)(o,{className:"",children:[(0,r.jsx)("summary",{children:"Code"}),(0,r.jsxs)(t.p,{children:["This code will parse anything that looks like ",(0,r.jsx)(t.code,{children:"?features[___]=___"}),' and store it as a "feature request". We don\'t want a magic URL that can force any feature flag we like, that would be too dangerous. By treating these as a "request" we retain the ultimate ability to decide if we want to honor the request or not in the feature flag UI, which is where it should be.']}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'import { useSearchParams } from "react-router-dom";\n\n// get any existing existing "featureRequests" from local storage\nlet featureReqs = {};\ntry {\n  featureReqs = JSON.parse(localStorage.getItem("featureRequests") ?? "{}");\n} catch (e) {\n  // localStorage can throw an error if the user has disabled via privacy settings\n  console.error(e);\n}\n\n// pass in url params eg ?features[v2-beta]=false\nconst [searchParams] = useSearchParams();\nsearchParams.forEach((value, key) => {\n  if (key.startsWith("feature")) {\n    const featureName = key.split("[")[1].split("]")[0]; // Extract \'v2-beta\' from \'feature[v2-beta]\'\n    featureReqs[featureName] = value;\n  }\n});\n'})})]}),"\n",(0,r.jsx)(t.h3,{id:"2-persist-this-information",children:"2. Persist this information"}),"\n",(0,r.jsx)(t.p,{children:"For today, let's imagine a React app and we'll use the browser's local storage. We'll store a JSON object with the feature names as keys and the values as booleans."}),"\n",(0,r.jsxs)(o,{className:"",children:[(0,r.jsx)("summary",{children:"Code"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// store feature overrides\nif (Object.keys(featureReqs).length !== 0) {\n  try {\n    localStorage.setItem("featureRequests", JSON.stringify(featureReqs));\n  } catch (e) {\n    console.error(e);\n  }\n}\n'})})]}),"\n",(0,r.jsx)(t.h3,{id:"3-send-this-context-to-prefab-for-evaluation",children:"3. Send this Context to Prefab for evaluation"}),"\n",(0,r.jsxs)(t.p,{children:["Now we'll just send the feature requests along with the user's tracking id to Prefab like we would any other ",(0,r.jsx)(t.a,{href:"/docs/explanations/concepts/context",children:"context"}),". We'll use the ",(0,r.jsx)(t.code,{children:"featureRequests"})," key to create a rule that will enable the feature for this user."]}),"\n",(0,r.jsxs)(o,{className:"",children:[(0,r.jsx)("summary",{children:"Code"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// at the top level of your app\n\nimport { PrefabProvider } from "@prefab-cloud/prefab-cloud-react";\n\nconst context = {\n  user: { key: user.tracking_id },\n  // highlight-next-line\n  featureRequests: featureReqs // we can now create a rule IF featureRequests.v2-beta = true\n}\n\nconst onError = (reason) => {\n  console.error(reason);\n};\n\nreturn (\n  <PrefabProvider\n    apiKey={"CLIENT_API_KEY"}\n    contextAttributes={context}\n    onError={onError}\n  >\n    <MyApp />\n  </PrefabProvider>\n};\n\n// in your component that renders the feature\n\nconst MyComponent = () => {\n  // highlight-start\n  const { isEnabled } = usePrefab();\n\n  if (isEnabled"v2-beta-flag")) {\n    return (\n      <div>New Improved V2 UI</div>\n    );\n  }\n  // highlight-end\n\n  return (\n    <div>Old UI</div>\n  );\n}\n'})})]}),"\n",(0,r.jsx)(t.h3,{id:"4-configure-our-flag-to-respect-this-preference",children:"4. Configure our flag to respect this preference"}),"\n",(0,r.jsxs)(t.p,{children:["Now we can create a rule that will enable the feature for anyone who has ",(0,r.jsx)(t.code,{children:"featureRequests.v2-beta = true"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"UI matching our context key",src:n(6476).A+"",width:"717",height:"538"})}),"\n",(0,r.jsx)(t.p,{children:"By being explicit about it in the UI, we've ensured that this capability only exists for flags where we'd like this to be true."}),"\n",(0,r.jsxs)(t.p,{children:["The nice thing about this approach is that we shouldn't need to touch this code again. The next time we want to allow internal users to use a feature flag, we can just agree on the url param ",(0,r.jsx)(t.code,{children:"?features[v3-redesign]=variant-a"}),", add the rule in the UI and we're good to go."]}),"\n",(0,r.jsx)(t.h2,{id:"putting-it-all-together",children:"Putting it all together"}),"\n",(0,r.jsx)(t.p,{children:"Here's all of the code together."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// at the top level of your app\n\nimport { PrefabProvider } from "@prefab-cloud/prefab-cloud-react";\n\n// highlight-start\nimport { useSearchParams } from "react-router-dom";\n\n// get any existing existing "featureRequests" from local storage\nlet featureReqs = {};\ntry {\n  featureReqs = JSON.parse(localStorage.getItem("featureRequests") ?? "{}");\n} catch (e) {\n  // localStorage can throw an error if the user has disabled via privacy settings\n  console.error(e);\n}\n\n// pass in url params eg ?features[v2-beta]=false\nconst [searchParams] = useSearchParams();\nsearchParams.forEach((value, key) => {\n  if (key.startsWith("feature")) {\n    const featureName = key.split("[")[1].split("]")[0]; // Extract \'v2-beta\' from \'feature[v2-beta]\'\n    featureReqs[featureName] = value;\n  }\n});\n\n// store feature overrides\nif (Object.keys(featureReqs).length !== 0) {\n  try {\n    localStorage.setItem("featureRequests", JSON.stringify(featureReqs));\n  } catch (e) {\n    console.error(e);\n  }\n}\n// highlight-end\n\nconst context = {\n  user: { key: user.tracking_id },\n  // highlight-next-line\n  featureRequests: featureReqs // we can now create a rule IF featureRequests.v2-beta = true\n}\n\nconst onError = (reason) => {\n  console.error(reason);\n};\n\nreturn (\n  <PrefabProvider\n    apiKey={"CLIENT_API_KEY"}\n    contextAttributes={context}\n    onError={onError}\n  >\n    <MyApp />\n  </PrefabProvider>\n};\n\n// in your component that renders the feature\n\nconst MyComponent = () => {\n  // highlight-start\n  const { isEnabled } = usePrefab();\n\n  if (isEnabled"v2-beta-flag")) {\n    return (\n      <div>New Improved V2 UI</div>\n    );\n  }\n  // highlight-end\n\n  return (\n    <div>Old UI</div>\n  );\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"note",children:"Note"}),"\n",(0,r.jsx)(t.p,{children:"This approach is a good solution for front end flags in JS or React. The same approach will also work for backend SDKs, swapping out local storage for a database or cache."}),"\n",(0,r.jsx)(t.p,{children:"This approach will need to be modified if you are sharing flags across multiple applications or front end and backend. In that case, you'll need to find a way to give the same featureRequest context to all of your applications. This could be done as a column on the user table or as a cookie."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},6476:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/optin-ff-1e3a23bd12f656cd53bc6f13ae807c67.jpg"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(6540);const a={},o=r.createContext(a);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);