"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[2643],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>f});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=u(t),d=o,f=g["".concat(s,".").concat(d)]||g[d]||c[d]||a;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[g]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=t(8168),o=(t(6540),t(5680));const a={title:"Netlify"},l=void 0,i={unversionedId:"sdks/node/netlify",id:"sdks/node/netlify",title:"Netlify",description:"Choosing an Approach",source:"@site/docs/sdks/node/netlify.md",sourceDirName:"sdks/node",slug:"/sdks/node/netlify",permalink:"/docs/sdks/node/netlify",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/sdks/node/netlify.md",tags:[],version:"current",frontMatter:{title:"Netlify"},sidebar:"tutorialSidebar",previous:{title:"Node",permalink:"/docs/sdks/node/"},next:{title:"Python",permalink:"/docs/sdks/python"}},s={},u=[{value:"Choosing an Approach",id:"choosing-an-approach",level:2},{value:"Feature Flags in Netlify: The Browser-Like Approach",id:"feature-flags-in-netlify-the-browser-like-approach",level:3},{value:"The Server-Side Alternative",id:"the-server-side-alternative",level:3},{value:"Dynamic Logging",id:"dynamic-logging",level:2},{value:"The Code We Want To Debug",id:"the-code-we-want-to-debug",level:3},{value:"Swap Logging to Prefab",id:"swap-logging-to-prefab",level:3},{value:"Listen for Changes",id:"listen-for-changes",level:3},{value:"Adding Per User Targeting",id:"adding-per-user-targeting",level:3}],p={toc:u},g="wrapper";function c(e){let{components:n,...t}=e;return(0,o.yg)(g,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"choosing-an-approach"},"Choosing an Approach"),(0,o.yg)("p",null,"The first step is to choose between a client-side style or server-side style approach. We've written a blog post that goes into detail about ",(0,o.yg)("a",{parentName:"p",href:"https://prefab.cloud/blog/feature-flags-for-netlify-functions/"},"choosing how to use Prefab with Netlify"),"."),(0,o.yg)("h3",{id:"feature-flags-in-netlify-the-browser-like-approach"},"Feature Flags in Netlify: The Browser-Like Approach"),(0,o.yg)("p",null,"A practical solution is to treat Netlify functions similar to a browser. Prefab's ",(0,o.yg)("a",{parentName:"p",href:"https://docs.prefab.cloud/docs/sdks/javascript"},"Javascript client"),", for instance, caches flag evaluations per user in a CDN. Here's a sample code snippet for this approach:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'import { prefab, Context } from "@prefab-cloud/prefab-cloud-js";\n\nexport default async (req, context) => {\n  const clientOptions = {\n    apiKey: process.env.PREFAB_API_KEY,\n    context: new Context({ user: { key: 1234 } }),\n  };\n\n  await prefab.init(clientOptions);\n  if (prefab.get("my-flag")) {\n    // Your code here\n  }\n  return new Response("ok");\n};\n')),(0,o.yg)("p",null,"In our testing from a Netlify function we see results around a 50ms latency initially and around then 10ms for each subsequent request for the same context. That may be too slow for some applications, but it's a good starting point and very easy to set up."),(0,o.yg)("p",null,"The nice thing about this solution is that you're going to get instant updates when you change a flag. The next request will have up to date data."),(0,o.yg)("h3",{id:"the-server-side-alternative"},"The Server-Side Alternative"),(0,o.yg)("p",null,"Alternatively, you can implement a server-side strategy using the Prefab ",(0,o.yg)("a",{parentName:"p",href:"https://docs.prefab.cloud/docs/sdks/node"},"NodeJS")," client.\nThe key will be configuring our client to disable background updates and background telemetry, then performing an update on our own timeline."),(0,o.yg)("p",null,"Here's a sample code snippet for this approach:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'import { Prefab } from "@prefab-cloud/prefab-cloud-node";\n\nvar prefab = new Prefab({\n  apiKey: process.env.PREFAB_API_KEY,\n  enableSSE: false, // we don\'t want any background process in our function\n  enablePolling: false, // we\'ll handle updates ourselves\n  collectLoggerCounts: false, // turn off background telemetry\n  contextUploadMode: "none", // turn off background telemetry\n  collectEvaluationSummaries: false, // turn off background telemetry\n});\n\n// initialize once on cold start\nawait prefab.init();\n\nexport default async (req, context) => {\n  const { userId } = context.params;\n  const prefabContext = { user: { key: context.userId } };\n\n  return prefab.inContext(prefabContext, (prefab) => {\n    if (prefab.get("my-flag")) {\n      // Your code here\n    }\n\n    // ever 60 seconds, check for updates in-process\n    updateIfStalerThan(60 * 1000);\n    return new Response("ok");\n  });\n};\n\nexport const config = { path: "/users/:userId" };\n')),(0,o.yg)("p",null,"With this approach, most of our requests will be fast, but we'll have a periodic update that will take a bit longer. This is about 50ms in my testing from a Netlify function. We're entirely in control of the frequency here, so it's a judgment call on how real-time you want your feature flag updates. You could even disable the updates altogether if tail latency is of utmost concern and you didn't mind redeploying to update your flags."),(0,o.yg)("h2",{id:"dynamic-logging"},"Dynamic Logging"),(0,o.yg)("h3",{id:"the-code-we-want-to-debug"},"The Code We Want To Debug"),(0,o.yg)("p",null,"Here's a really basic skeleton of a Netlify function. It's a simple function that takes a user id from the url and returns some data from the database. Let's pretend it's misbehaving and we need to debug it."),(0,o.yg)("p",null,"We've added two ",(0,o.yg)("inlineCode",{parentName:"p"},"console.log")," statements, but this probably isn't shippable as is because, at high throughput, we're going to print out way too much logging."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'export default async (req, context) => {\n  const { userId } = context.params;\n\n  var sql = "SELECT * FROM table WHERE user_id = $1";\n  console.log(`running the following SQL ${sql}`, { userId: userId });\n\n  db.run(sql, [userId], function (err, rows) {\n    console.log("query returned", { rows: rows });\n    return new Response("200 Okey-dokey");\n  });\n};\n\nexport const config = {\n  path: "/users/:userId",\n};\n')),(0,o.yg)("h3",{id:"swap-logging-to-prefab"},"Swap Logging to Prefab"),(0,o.yg)("p",null,"Rather than use a console.log, we will create a Prefab logger with the name ",(0,o.yg)("inlineCode",{parentName:"p"},"netlify.functions.hello")," and the default level of ",(0,o.yg)("inlineCode",{parentName:"p"},"warn")," so we don't get too much output."),(0,o.yg)("p",null,"We can replace our ",(0,o.yg)("inlineCode",{parentName:"p"},"console.log")," with some ",(0,o.yg)("inlineCode",{parentName:"p"},"logger.debug")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"logger.info"),", and now it's safe to deploy. They won't emit logs until we turn them on."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'const logger = prefab.logger("netlify.functions.hello", "warn");\n\n// simple info logging\nlogger.info(`getting results for ${userId}`);\n\nvar sql = "SELECT * FROM table WHERE user_id = $1";\n\n// more detailed debug logging\nlogger.debug(`running the following SQL ${sql} for ${userId}`);\ndb.run(sql, [userId], function (err, rows) {\n  logger.debug("query returned", { rows: rows });\n  return new Response("200 Okey-dokey");\n});\n')),(0,o.yg)("p",null,"This logging will ",(0,o.yg)("em",{parentName:"p"},"not")," show up in your Netlify logs yet, because the logger is ",(0,o.yg)("inlineCode",{parentName:"p"},"warn")," but the logging here is ",(0,o.yg)("inlineCode",{parentName:"p"},"info")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"debug"),". That means it's safe to go ahead and deploy."),(0,o.yg)("h3",{id:"listen-for-changes"},"Listen for Changes"),(0,o.yg)("p",null,"Since we turned off the background polling, we'll want to update prefab in line. We can do this by calling the ",(0,o.yg)("inlineCode",{parentName:"p"},"updateIfStalerThan")," with our desired polling frequency. This is a quick check to a CDN, taking around 40ms (once every minute)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"prefab.updateIfStalerThan(60 * 1000); // check for new updates every minute\n")),(0,o.yg)("p",null,"We can now toggle logging in the Prefab UI!"),(0,o.yg)("h3",{id:"adding-per-user-targeting"},"Adding Per User Targeting"),(0,o.yg)("p",null,"Now we'll go deeper and add per user targeting. This will let us laser focus in on a particular problem."),(0,o.yg)("p",null,"To add per user targeting, we need to tell Prefab who the current user is. We do this by setting some ",(0,o.yg)("a",{parentName:"p",href:"https://docs.prefab.cloud/docs/explanations/concepts/context"},"context")," for Prefab so it can evaluate the rules. We should also move the logger creation inside this context so that the logger has this context available to it."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'// take the context from our url /users/123 and give it to prefab as context\nconst { userId } = context.params;\nconst prefabContext = { user: { key: userId } };\n\n// wrap our code in this context\nprefab.inContext(prefabContext, (prefab) => {\n  // logger goes inside the context block\n  const logger = prefab.logger("netlify.functions.hello", "warn");\n\n  logger.info(`getting results for ${userId}`);\n\n  var sql = "SELECT * FROM table WHERE user_id = $1";\n\n  logger.debug(`running the following SQL ${sql} for ${userId}`);\n  db.run(sql, [userId], function (err, rows) {\n    logger.debug("query returned", { rows: rows });\n    return new Response("200 Okey-dokey");\n  });\n});\n')))}c.isMDXComponent=!0}}]);