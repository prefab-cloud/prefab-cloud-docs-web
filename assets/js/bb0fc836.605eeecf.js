"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[6423],{5601:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(4848),a=t(8453);const r={title:"Context",sidebar_label:"Context",sidebar_position:3},i=void 0,s={id:"explanations/concepts/context",title:"Context",description:"Feature Flags, Dynamic Logging and Config are most powerful when we can target specific users, teams or parts of our infrastructure.",source:"@site/docs/explanations/concepts/context.md",sourceDirName:"explanations/concepts",slug:"/explanations/concepts/context",permalink:"/docs/explanations/concepts/context",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/explanations/concepts/context.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Context",sidebar_label:"Context",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Frontend SDKs",permalink:"/docs/explanations/concepts/frontend-sdks"},next:{title:"DataFiles",permalink:"/docs/explanations/concepts/datafiles"}},l={},c=[{value:"Global and scoped context",id:"global-and-scoped-context",level:2},{value:"Context keys",id:"context-keys",level:2},{value:"Dot notation",id:"dot-notation",level:2},{value:"Advanced: Adding to and Merging Contexts",id:"advanced-adding-to-and-merging-contexts",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{TabItem:r,Tabs:i}=n;return r||u("TabItem",!0),i||u("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Feature Flags, Dynamic Logging and Config are most powerful when we can target specific users, teams or parts of our infrastructure.\nContext is how we do that."}),"\n",(0,o.jsx)(n.mermaid,{value:'graph TD;\n    A[Request] --\x3e Server\n    subgraph Server\n        Filter\n        subgraph Filter[Set Context In Filter]\n            D["Prefab.setContext (<br/>user: {key: 123, name: bob},<br/>team: {key: 456, tier: enterprise}<br/>cloud: {key: pod/web-55bbd, region: us-east})"]\n            subgraph ApplicationCode[Application Code]\n                E[prefab.enabled? my-flag // target user, team or cloud]\n            end\n            D --\x3e ApplicationCode\n        end\n    end\n'}),"\n",(0,o.jsxs)(n.p,{children:["Setting context in a filter allows you to set this knowledge once and use it everywhere when you evaluate feature flags, configs, and ",(0,o.jsx)(n.a,{href:"/docs/explanations/features/targeted-log-levels",children:"targeted log levels"})," without having to pass your context data deeply around your app."]}),"\n",(0,o.jsx)(n.p,{children:"In a web app, the life-cycle of contexts are the life-cycle of the request. You set context at the beginning of the request and then it is cleared out when the request finishes."}),"\n",(0,o.jsx)(n.p,{children:"For feature flags, context usage is optional but a useful ergonomic -- you can always pass in your context just-in-time to your FF evaluations."}),"\n",(0,o.jsx)(n.p,{children:"For usage examples, see your relevant SDK client documentation."}),"\n",(0,o.jsx)(n.h2,{id:"global-and-scoped-context",children:"Global and scoped context"}),"\n",(0,o.jsx)(n.p,{children:"To avoid deeply passing around awareness of the current user, request, etc., Prefab allows you to set Context globally and also for a thread/request scope or block. The mechanisms for doing so will vary by language and framework."}),"\n",(0,o.jsx)(n.p,{children:"When context is set, log levels and feature flags will be evaluated in that context. If you provide just-in-time context to your FF evaluations, it will be merged with the thread/request context and global context. More on merging below."}),"\n",(0,o.jsx)(n.p,{children:"The most-specific context will always win. If you set the same key in your JIT context that is present in another context, it will clobber the global context and thread/request context for the duration of the evaluation."}),"\n",(0,o.jsxs)(i,{groupId:"lang",children:[(0,o.jsxs)(r,{value:"ruby",label:"Ruby",children:[(0,o.jsx)(n.p,{children:"We can use a block to specify the context for the duration of the block."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'\nPrefab.init(global_context: {application: {key: "my.corp.web"}})\n\ncontext = { device: { key: "abcdef", mobile: mobile? } }\n\nPrefab.with_context(context) do\n  # ...\nend\n'})})]}),(0,o.jsxs)(r,{value:"ror",label:"Ruby on Rails",children:[(0,o.jsx)(n.p,{children:"We can set global context when initializing Prefab"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'# in config/application.rb\nPrefab.init(global_context: {application: {key: "my.corp.web"}})\n'})}),(0,o.jsxs)(n.p,{children:["We can use an ",(0,o.jsx)(n.code,{children:"around_action"})," to set our context for the life-cycle of the request."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'# in app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  around_action :set_prefab_context\n\n  def set_prefab_context\n    Prefab.with_context(context) do\n      yield\n    end\n  end\n\n  def context\n    {\n      device: {\n        key: "abcdef",\n        mobile: mobile?\n      }\n      user: current_user&.to_context\n      # ...\n    }\n  end\nend\n'})}),(0,o.jsxs)(n.p,{children:["Learn more with the ",(0,o.jsx)(n.a,{href:"https://github.com/prefab-cloud/example-rails-app",children:"Prefab + Rails example app"})]})]}),(0,o.jsxs)(r,{value:"micronaut",label:"Micronaut",children:[(0,o.jsx)(n.p,{children:"In your Prefab options, set your Prefab Context store to be your ServerRequestContextStore."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"options.setContextStore(new ServerRequestContextStore());\n"})}),(0,o.jsxs)(n.p,{children:["Next, we add a ",(0,o.jsx)(n.a,{href:"https://github.com/prefab-cloud/example-micronaut-app/blob/configure-prefab-context/src/main/java/com/example/prefab/PrefabContextFilter.java",children:"filter"}),' to add a prefab context based on the currently "logged in" user.']}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'configClient.getContextStore()\n      .addContext(PrefabContext.newBuilder("user")\n          .put("key", user.key())\n          .put("country", user.country())\n          .put("email", user.email())\n          .build()\n      );\n'})}),(0,o.jsxs)(n.p,{children:["Learn more with the ",(0,o.jsx)(n.a,{href:"https://github.com/prefab-cloud/example-micronaut-app",children:"Prefab + Micronaut example app"})]})]}),(0,o.jsxs)(r,{value:"dropwizard",label:"Dropwizard",children:[(0,o.jsxs)(n.p,{children:["Use a ",(0,o.jsx)(n.code,{children:"ContainerRequestFilter"})," to set the context for your request when the request begins"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class PrefabContextAddingRequestFilter implements ContainerRequestFilter {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PrefabContextAddingRequestFilter.class);\n    private final ConfigClient configClient;\n\n    @Inject\n    public PrefabContextAddingRequestFilter(ConfigClient configClient) {\n        this.configClient = configClient;\n    }\n\n    @Override\n    public void filter(ContainerRequestContext containerRequestContext) throws IOException {\n        final SecurityContext securityContext =\n                containerRequestContext.getSecurityContext();\n        if (securityContext != null) {\n            Principal principal = securityContext.getUserPrincipal();\n            if (principal instanceof User) {\n                User user = (User) principal;\n                LOGGER.info("will add pf context for {}", user);\n                configClient.getContextStore().addContext(PrefabContext.newBuilder("User")\n                        .put("key", user.getKey())\n                        .put("name", user.getName())\n                        .build());\n            }\n        }\n    }\n}\n'})}),(0,o.jsxs)(n.p,{children:["Then we'll add another ",(0,o.jsx)(n.code,{children:"ContainerResponseFilter"})," to clear the context when the request finishes."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class PrefabContexClearingResponseFilter implements ContainerResponseFilter {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PrefabContexClearingResponseFilter.class);\n    private final ConfigClient configClient;\n\n    @Inject\n    PrefabContexClearingResponseFilter(ConfigClient configClient) {\n        this.configClient = configClient;\n    }\n\n    @Override\n    public void filter(ContainerRequestContext containerRequestContext, ContainerResponseContext containerResponseContext) throws IOException {\n        configClient.getContextStore().clearContexts();\n        LOGGER.info("Cleared context");\n    }\n}\n'})}),(0,o.jsxs)(n.p,{children:["Learn more with the ",(0,o.jsx)(n.a,{href:"https://github.com/prefab-cloud/example-dropwizard-app",children:"Prefab + Dropwizard example app"})]})]}),(0,o.jsxs)(r,{value:"javascript",label:"JavaScript",children:[(0,o.jsx)(n.p,{children:"In JavaScript, there is only the global context. You can't specify a JIT context. Prefab fetches evaluated feature flags based on the context you provided."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { prefab, Context } from '@prefab-cloud/prefab-cloud-js'\n\nconst context = new Context({user: { email: 'test@example.com' }, device: { mobile: true } });\n\nconst options = { apiKey: '1234', context };\n\nawait prefab.init(options);\n\nif (prefab.isEnabled('cool-feature') {\n  // ...\n}\n"})})]}),(0,o.jsxs)(r,{value:"react",label:"React",children:[(0,o.jsx)(n.p,{children:"In React, there is only the global context. You can't specify a JIT context. Prefab fetches evaluated feature flags based on the context you provided."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { PrefabProvider } from '@prefab-cloud/prefab-cloud-react';\n\nconst WrappedApp = () => {\n  const context = { user: { email: \"jeffrey@example.com\" }, subscription: { plan: \"advanced\" } };\n\n  return (\n    <PrefabProvider\n      apiKey={'YOUR_API_KEY'}\n      contextAttributes={context}\n      <App />\n    </PrefabProvider>\n  );\n}\n"})})]}),(0,o.jsxs)(r,{value:"python",label:"Python",children:[(0,o.jsx)(n.p,{children:"Python supports global context set in options, context set as thread local, and JIT context."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from prefab_cloud_python import Options, Client, Context\n\nglobal_context = {\n    "deployment" {\n       "key" : "api"\n       "az" : "us-east-1"\n     }\n}\nprefab = Client(Options(global_context=global_context))\n\n\ncontext = {\n    "user": {\n        "key": 123,\n        "subscription_level": "pro",\n        "email": "bob@example.com"\n    },\n    "team": {\n        "key": 432,\n    },\n    "device": {\n        "key": "abcdef",\n        "mobile": False\n    }\n}\n\nshared_context = Context(context)\n\n#set in thread local\nContext.set_current(shared_context)\n\n# optionally pass directly to the client\nprefab.enabled("my-first-feature-flag", context={...})\n'})})]})]}),"\n",(0,o.jsx)(n.h2,{id:"context-keys",children:"Context keys"}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.code,{children:"key"})," is special"]})}),(0,o.jsx)(n.p,{children:"The key is the one special attribute of a context. It should be the unchanging, primary key of whatever your context is. For a user, that's likely the tracking ID set when you first saw them. For a team, it's probably the primary key of the table. For a Kubernetes pod, the pod id. Key is the handle Prefab if you want to add this context entity to a feature flag."}),(0,o.jsxs)(n.p,{children:["It's ok if there isn't a good key. If you add ",(0,o.jsx)(n.code,{children:"{cloud: {region: us-east, availability-zone: us-east-1a}}"}),", you'll be able to target ",(0,o.jsx)(n.code,{children:"cloud.region"})," or ",(0,o.jsx)(n.code,{children:"cloud.availability-zone"})," with rules. If you add ",(0,o.jsx)(n.code,{children:'cloud.key: "i-1234567890abcdef0"'})," you'll additionally be able to search for this context entity in context search tool."]}),(0,o.jsxs)(n.p,{children:["If you provide a ",(0,o.jsx)(n.code,{children:"name"})," attributes (as a sibling to ",(0,o.jsx)(n.code,{children:"key"}),'), it will be used in the Prefab UI to display the context entity as a "friendly" alternative to ',(0,o.jsx)(n.code,{children:"key"}),". If you don't provide a ",(0,o.jsx)(n.code,{children:"name"}),", Prefab will use the ",(0,o.jsx)(n.code,{children:"key"})," as the display name."]})]}),"\n",(0,o.jsx)(n.h2,{id:"dot-notation",children:"Dot notation"}),"\n",(0,o.jsx)(n.p,{children:"When referencing fields from context, we use dot notation."}),"\n",(0,o.jsx)(n.p,{children:"Given the context:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'{\n  user: {\n    key: "1234",\n    email: "test@example.com",\n  },\n\n  device: {\n    key: "abcd123e-a123-bcFG-d123",\n    mobile: true,\n  },\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can reference ",(0,o.jsx)(n.code,{children:"user.key"})," and ",(0,o.jsx)(n.code,{children:"device.mobile"})," in the property field in the UI."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"dot notation in UI",src:t(7046).A+"",width:"1912",height:"340"})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-adding-to-and-merging-contexts",children:"Advanced: Adding to and Merging Contexts"}),"\n",(0,o.jsx)(n.p,{children:"If you provide a context that conflicts with an existing context, your new context values will clobber any previous value."}),"\n",(0,o.jsx)(n.p,{children:'Let\'s use this example as our initial context. It has two contexts: "request" and "subscription".'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "request": {\n    "mobile": true,\n    "country": "US"\n  },\n  "subscription": {\n    "key": "s_123",\n    "allow_overages": false,\n    "plan": "Pro"\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:['If we set the "request" context to ',(0,o.jsx)(n.code,{children:'{ key: "f1e6461a", type: "iPhone" }'})," then we lose the ",(0,o.jsx)(n.code,{children:"mobile"})," and ",(0,o.jsx)(n.code,{children:"country"}),' attributes of our "request" context. Our current context is now']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "request": {\n    "key": "f1e6461a",\n    "device_type": "iPhone"\n  },\n  "subscription": {\n    "key": "s_123",\n    "allow_overages": false,\n    "plan": "Pro"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"If we provide Just-In-Time (JIT) context to our flag evaluation call, then the JIT keys clobber the current context keys only for the duration of the evaluation."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'jit_context = {\n  subscription: { allow_overages: true },\n  user: { admin: true }\n}\n\nPrefab.enabled?("my.flag.name", jit_context)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["That ",(0,o.jsx)(n.code,{children:"enabled?"})," check uses this context"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "request": {\n    "key": "f1e6461a",\n    "type": "iPhone"\n  },\n  "subscription": { "allow_overages": true },\n  "user": { "admin": true }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"But then the current context after that evaluation is still"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "request": {\n    "key": "f1e6461a",\n    "type": "iPhone"\n  },\n  "subscription": {\n    "key": "s_123",\n    "allow_overages": false,\n    "plan": "Pro"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can, of course, do your own merging before re-setting the context key."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},7046:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/dot-notation-79a9f5bbe65d2b1fa320a8117b66bc71.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(6540);const a={},r=o.createContext(a);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);