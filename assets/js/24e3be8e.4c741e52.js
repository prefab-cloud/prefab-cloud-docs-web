"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[2643],{4361:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var o=t(4848),r=t(8453);const s={title:"Netlify"},a=void 0,i={id:"sdks/node/netlify",title:"Netlify",description:"Choosing an Approach",source:"@site/docs/sdks/node/netlify.md",sourceDirName:"sdks/node",slug:"/sdks/node/netlify",permalink:"/docs/sdks/node/netlify",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/sdks/node/netlify.md",tags:[],version:"current",frontMatter:{title:"Netlify"},sidebar:"tutorialSidebar",previous:{title:"Node",permalink:"/docs/sdks/node/"},next:{title:"Python",permalink:"/docs/sdks/python"}},l={},d=[{value:"Choosing an Approach",id:"choosing-an-approach",level:2},{value:"Feature Flags in Netlify: The Browser-Like Approach",id:"feature-flags-in-netlify-the-browser-like-approach",level:3},{value:"The Server-Side Alternative",id:"the-server-side-alternative",level:3},{value:"Dynamic Logging",id:"dynamic-logging",level:2},{value:"The Code We Want To Debug",id:"the-code-we-want-to-debug",level:3},{value:"Swap Logging to Prefab",id:"swap-logging-to-prefab",level:3},{value:"Listen for Changes",id:"listen-for-changes",level:3},{value:"Adding Per User Targeting",id:"adding-per-user-targeting",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"choosing-an-approach",children:"Choosing an Approach"}),"\n",(0,o.jsxs)(n.p,{children:["The first step is to choose between a client-side style or server-side style approach. We've written a blog post that goes into detail about ",(0,o.jsx)(n.a,{href:"https://prefab.cloud/blog/feature-flags-for-netlify-functions/",children:"choosing how to use Prefab with Netlify"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"feature-flags-in-netlify-the-browser-like-approach",children:"Feature Flags in Netlify: The Browser-Like Approach"}),"\n",(0,o.jsxs)(n.p,{children:["A practical solution is to treat Netlify functions similar to a browser. Prefab's ",(0,o.jsx)(n.a,{href:"https://docs.prefab.cloud/docs/sdks/javascript",children:"Javascript client"}),", for instance, caches flag evaluations per user in a CDN. Here's a sample code snippet for this approach:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'import { prefab, Context } from "@prefab-cloud/prefab-cloud-js";\n\nexport default async (req, context) => {\n  const clientOptions = {\n    apiKey: process.env.PREFAB_API_KEY,\n    context: new Context({ user: { key: 1234 } }),\n  };\n\n  await prefab.init(clientOptions);\n  if (prefab.get("my-flag")) {\n    // Your code here\n  }\n  return new Response("ok");\n};\n'})}),"\n",(0,o.jsx)(n.p,{children:"In our testing from a Netlify function we see results around a 50ms latency initially and around then 10ms for each subsequent request for the same context. That may be too slow for some applications, but it's a good starting point and very easy to set up."}),"\n",(0,o.jsx)(n.p,{children:"The nice thing about this solution is that you're going to get instant updates when you change a flag. The next request will have up to date data."}),"\n",(0,o.jsx)(n.h3,{id:"the-server-side-alternative",children:"The Server-Side Alternative"}),"\n",(0,o.jsxs)(n.p,{children:["Alternatively, you can implement a server-side strategy using the Prefab ",(0,o.jsx)(n.a,{href:"https://docs.prefab.cloud/docs/sdks/node",children:"NodeJS"})," client.\nThe key will be configuring our client to disable background updates and background telemetry, then performing an update on our own timeline."]}),"\n",(0,o.jsx)(n.p,{children:"Here's a sample code snippet for this approach:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'import { Prefab } from "@prefab-cloud/prefab-cloud-node";\n\nvar prefab = new Prefab({\n  apiKey: process.env.PREFAB_API_KEY,\n  enableSSE: false, // we don\'t want any background process in our function\n  enablePolling: false, // we\'ll handle updates ourselves\n  collectLoggerCounts: false, // turn off background telemetry\n  contextUploadMode: "none", // turn off background telemetry\n  collectEvaluationSummaries: false, // turn off background telemetry\n});\n\n// initialize once on cold start\nawait prefab.init();\n\nexport default async (req, context) => {\n  const { userId } = context.params;\n  const prefabContext = { user: { key: context.userId } };\n\n  return prefab.inContext(prefabContext, (prefab) => {\n    if (prefab.get("my-flag")) {\n      // Your code here\n    }\n\n    // ever 60 seconds, check for updates in-process\n    updateIfStalerThan(60 * 1000);\n    return new Response("ok");\n  });\n};\n\nexport const config = { path: "/users/:userId" };\n'})}),"\n",(0,o.jsx)(n.p,{children:"With this approach, most of our requests will be fast, but we'll have a periodic update that will take a bit longer. This is about 50ms in my testing from a Netlify function. We're entirely in control of the frequency here, so it's a judgment call on how real-time you want your feature flag updates. You could even disable the updates altogether if tail latency is of utmost concern and you didn't mind redeploying to update your flags."}),"\n",(0,o.jsx)(n.h2,{id:"dynamic-logging",children:"Dynamic Logging"}),"\n",(0,o.jsx)(n.h3,{id:"the-code-we-want-to-debug",children:"The Code We Want To Debug"}),"\n",(0,o.jsx)(n.p,{children:"Here's a really basic skeleton of a Netlify function. It's a simple function that takes a user id from the url and returns some data from the database. Let's pretend it's misbehaving and we need to debug it."}),"\n",(0,o.jsxs)(n.p,{children:["We've added two ",(0,o.jsx)(n.code,{children:"console.log"})," statements, but this probably isn't shippable as is because, at high throughput, we're going to print out way too much logging."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'export default async (req, context) => {\n  const { userId } = context.params;\n\n  var sql = "SELECT * FROM table WHERE user_id = $1";\n  console.log(`running the following SQL ${sql}`, { userId: userId });\n\n  db.run(sql, [userId], function (err, rows) {\n    console.log("query returned", { rows: rows });\n    return new Response("200 Okey-dokey");\n  });\n};\n\nexport const config = {\n  path: "/users/:userId",\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"swap-logging-to-prefab",children:"Swap Logging to Prefab"}),"\n",(0,o.jsxs)(n.p,{children:["Rather than use a console.log, we will create a Prefab logger with the name ",(0,o.jsx)(n.code,{children:"netlify.functions.hello"})," and the default level of ",(0,o.jsx)(n.code,{children:"warn"})," so we don't get too much output."]}),"\n",(0,o.jsxs)(n.p,{children:["We can replace our ",(0,o.jsx)(n.code,{children:"console.log"})," with some ",(0,o.jsx)(n.code,{children:"logger.debug"})," and ",(0,o.jsx)(n.code,{children:"logger.info"}),", and now it's safe to deploy. They won't emit logs until we turn them on."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const logger = prefab.logger("netlify.functions.hello", "warn");\n\n// simple info logging\nlogger.info(`getting results for ${userId}`);\n\nvar sql = "SELECT * FROM table WHERE user_id = $1";\n\n// more detailed debug logging\nlogger.debug(`running the following SQL ${sql} for ${userId}`);\ndb.run(sql, [userId], function (err, rows) {\n  logger.debug("query returned", { rows: rows });\n  return new Response("200 Okey-dokey");\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This logging will ",(0,o.jsx)(n.em,{children:"not"})," show up in your Netlify logs yet, because the logger is ",(0,o.jsx)(n.code,{children:"warn"})," but the logging here is ",(0,o.jsx)(n.code,{children:"info"})," and ",(0,o.jsx)(n.code,{children:"debug"}),". That means it's safe to go ahead and deploy."]}),"\n",(0,o.jsx)(n.h3,{id:"listen-for-changes",children:"Listen for Changes"}),"\n",(0,o.jsxs)(n.p,{children:["Since we turned off the background polling, we'll want to update prefab in line. We can do this by calling the ",(0,o.jsx)(n.code,{children:"updateIfStalerThan"})," with our desired polling frequency. This is a quick check to a CDN, taking around 40ms (once every minute)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"prefab.updateIfStalerThan(60 * 1000); // check for new updates every minute\n"})}),"\n",(0,o.jsx)(n.p,{children:"We can now toggle logging in the Prefab UI!"}),"\n",(0,o.jsx)(n.h3,{id:"adding-per-user-targeting",children:"Adding Per User Targeting"}),"\n",(0,o.jsx)(n.p,{children:"Now we'll go deeper and add per user targeting. This will let us laser focus in on a particular problem."}),"\n",(0,o.jsxs)(n.p,{children:["To add per user targeting, we need to tell Prefab who the current user is. We do this by setting some ",(0,o.jsx)(n.a,{href:"https://docs.prefab.cloud/docs/explanations/concepts/context",children:"context"})," for Prefab so it can evaluate the rules. We should also move the logger creation inside this context so that the logger has this context available to it."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// take the context from our url /users/123 and give it to prefab as context\nconst { userId } = context.params;\nconst prefabContext = { user: { key: userId } };\n\n// wrap our code in this context\nprefab.inContext(prefabContext, (prefab) => {\n  // logger goes inside the context block\n  const logger = prefab.logger("netlify.functions.hello", "warn");\n\n  logger.info(`getting results for ${userId}`);\n\n  var sql = "SELECT * FROM table WHERE user_id = $1";\n\n  logger.debug(`running the following SQL ${sql} for ${userId}`);\n  db.run(sql, [userId], function (err, rows) {\n    logger.debug("query returned", { rows: rows });\n    return new Response("200 Okey-dokey");\n  });\n});\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);