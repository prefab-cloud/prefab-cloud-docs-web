"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[4046],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>f});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,f=d["".concat(l,".").concat(g)]||d[g]||u[g]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4377:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>b,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(8168),r=(n(6540),n(5680));const i={title:"Testing",sidebar_label:"Testing",sidebar_position:5},o=void 0,s={unversionedId:"explanations/concepts/testing",id:"explanations/concepts/testing",title:"Testing",description:"Our SDKs and Clients provide library and language-specific testing advice. For specific details, refer to the docs for the SDK or client you're using.",source:"@site/docs/explanations/concepts/testing.md",sourceDirName:"explanations/concepts",slug:"/explanations/concepts/testing",permalink:"/docs/explanations/concepts/testing",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/explanations/concepts/testing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Testing",sidebar_label:"Testing",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"DataFiles",permalink:"/docs/explanations/concepts/datafiles"},next:{title:"Zero-ms Frontend Feature Flags",permalink:"/docs/explanations/concepts/zero-ms-frontend-feature-flags"}},l={},c=[{value:"Best Practices For Testing",id:"best-practices-for-testing",level:3},{value:"Mocking",id:"mocking",level:2},{value:"Backend SDKs",id:"backend-sdks",level:3},{value:"Frontend Libraries",id:"frontend-libraries",level:3},{value:"Testing with DataFiles",id:"testing-with-datafiles",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",t)},d=p("Tabs"),u=p("TabItem"),g={toc:c},f="wrapper";function b(e){let{components:t,...n}=e;return(0,r.yg)(f,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Our SDKs and Clients provide library and language-specific testing advice. For specific details, refer to the docs for the SDK or client you're using.")),(0,r.yg)("p",null,"Testing is a first-class citizen in Prefab. We've designed it so that it is easy to test your code that uses Prefab."),(0,r.yg)("h3",{id:"best-practices-for-testing"},"Best Practices For Testing"),(0,r.yg)("p",null,"The best practice for testing is to create a test environment and use a ",(0,r.yg)("a",{parentName:"p",href:"./datafiles"},"datafile"),". A datafile is a JSON snapshot of your configuration, which allows the Prefab client to boot up in a consistent state without talking to the Prefab server."),(0,r.yg)("p",null,"You can then use mocking to override specific values as-needed, when you are testing the behavior of a particular feature flag or config."),(0,r.yg)("h2",{id:"mocking"},"Mocking"),(0,r.yg)("h3",{id:"backend-sdks"},"Backend SDKs"),(0,r.yg)("p",null,"The primary way to test Prefab is by mocking out calls to Prefab. Here are some examples:"),(0,r.yg)(d,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'@Test\nvoid testPrefab(){\n  ConfigClient mockConfigClient = mock(ConfigClient.class);\n  when(mockConfigClient.liveString("sample.string")).thenReturn(FixedValue.of("test value"));\n  when(mockConfigClient.liveLong("sample.long")).thenReturn(FixedValue.of(123L));\n\n  MyClass myClass = new MyClass(mock(ConfigClient.class));\n\n  // test business logic\n\n}\n'))),(0,r.yg)(u,{value:"ruby",label:"Ruby",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ruby"},"class Job < Array\n  def batches\n    slice_size = Prefab.get('job.batch.size')\n    each_slice(slice_size)\n  end\nend\n\nRSpec.describe Job do\n  describe '#batches' do\n    it 'returns batches of jobs' do\n      jobs = Job.new([1, 2, 3, 4, 5])\n      expect(jobs.batches.map(&:size)).to eq([3, 2])\n      allow(Prefab).to receive(:get).with('job.batch.size').and_return(2)\n      expect(jobs.batches.map(&:size)).to eq([2, 2, 1])\n    end\n  end\nend\n")))),(0,r.yg)("h3",{id:"frontend-libraries"},"Frontend Libraries"),(0,r.yg)("p",null,"Rather than talking to the server, use ",(0,r.yg)("inlineCode",{parentName:"p"},"setConfig")," or use a ",(0,r.yg)("inlineCode",{parentName:"p"},"Provider")," manually with your test setup."),(0,r.yg)(d,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.yg)("p",null,"Don't call ",(0,r.yg)("inlineCode",{parentName:"p"},"prefab.init"),". Instead, use ",(0,r.yg)("inlineCode",{parentName:"p"},"setConfig")," to set up your scenario."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"prefab.setConfig({\n  turbo: true,\n  defaultMediaCount: 3,\n});\n")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/sdks/javascript#testing"},"Read the full JavaScript testing docs."))),(0,r.yg)(u,{value:"react",label:"React",mdxType:"TabItem"},(0,r.yg)("p",null,"Don't use the ",(0,r.yg)("inlineCode",{parentName:"p"},"PrefabProvider"),". Instead, use the ",(0,r.yg)("inlineCode",{parentName:"p"},"PrefabTestProvider")," and pass in a config object."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"<PrefabTestProvider config={config}>\n  <MyComponent />\n</PrefabTestProvider>,\n")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/sdks/react#testing"},"Read the full React testing docs.")))),(0,r.yg)("h2",{id:"testing-with-datafiles"},"Testing with DataFiles"),(0,r.yg)("p",null,"Mocking out all of the Prefab calls can be tedious, so we've added a feature called ",(0,r.yg)("a",{parentName:"p",href:"./datafiles"},"DataFiles")," to Prefab."),(0,r.yg)("p",null,"Having your tests/CI reach out to Prefab to get the latest configuration is a viable approach, but for consistency & reproducibility, many of us prefer to have full control over the configuration used to run tests. Datafiles are perfect for this use case."))}b.isMDXComponent=!0}}]);