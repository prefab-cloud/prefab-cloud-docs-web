"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[351],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,g=u["".concat(s,".").concat(f)]||u[f]||d[f]||l;return n?a.createElement(g,r(r({ref:t},c),{},{components:n})):a.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7622:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const l={title:"Python",sidebar_position:17},r=void 0,i={unversionedId:"sdks/python",id:"sdks/python",title:"Python",description:"Getting Started with the Python SDK",source:"@site/docs/sdks/python.md",sourceDirName:"sdks",slug:"/sdks/python",permalink:"/docs/sdks/python",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/sdks/python.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{title:"Python",sidebar_position:17},sidebar:"tutorialSidebar",previous:{title:"Elixir",permalink:"/docs/sdks/elixir"}},s={},p=[{value:"Getting Started with the Python SDK",id:"getting-started-with-the-python-sdk",level:2},{value:"Configure Options",id:"configure-options",level:2},{value:"Available <code>Option</code> parameters",id:"available-option-parameters",level:3},{value:"Start the Client",id:"start-the-client",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Defaults",id:"defaults",level:3},{value:"Getting Started",id:"getting-started",level:3},{value:"Feature Flags",id:"feature-flags",level:2},{value:"Global context",id:"global-context",level:3},{value:"Scoped context",id:"scoped-context",level:3},{value:"Namespaces",id:"namespaces",level:2},{value:"Logging",id:"logging",level:2},{value:"Targeted Log Levels",id:"targeted-log-levels",level:3},{value:"Log levels",id:"log-levels",level:3},{value:"Local Overrides",id:"local-overrides",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Testing",id:"testing",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"getting-started-with-the-python-sdk"},"Getting Started with the Python SDK"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Note: This library is under active development and not quite ready for production usage")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://forms.gle/2qsjMFvjGnkTnA9T8"},"Sign up to be notified when this library releases"))),(0,o.kt)("p",null,"Add ",(0,o.kt)("inlineCode",{parentName:"p"},"prefab_cloud_python")," to your package dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# pyproject.toml\n\n...\n\n[tool.poetry.dependencies]\nprefab_cloud_python = "0.1.0"\n')),(0,o.kt)("h2",{id:"configure-options"},"Configure Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from prefab_cloud_python import Options\n\noptions = Options(\n    api_key="SDK-your-api-key",\n    prefab_api_url="https://api.prefab.cloud",\n    prefab_grpc_url="grpc.prefab.cloud:443"\n)\n')),(0,o.kt)("p",null,"To avoid passing your API key directly in code, we recommend setting it in your\nenvironment as ",(0,o.kt)("inlineCode",{parentName:"p"},"PREFAB_API_KEY"),". Once you've done this you do not need to pass\na value for that key to ",(0,o.kt)("inlineCode",{parentName:"p"},"Options(...)"),", as it will look in your ENV for a value\nfor that key."),(0,o.kt)("h3",{id:"available-option-parameters"},"Available ",(0,o.kt)("inlineCode",{parentName:"h3"},"Option")," parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"api_key")," - your prefab.cloud SDK API key"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prefab_api_url")," - the API endpoint your API key has been created for (i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},"https://api.prefab.cloud"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prefab_grpc_url")," - the gRPC endpoint (including port) you wish to connect to (i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},"grpc.prefab.cloud:443"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"namespace")," - an optional namespace to define your client's scope when looking up config"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prefab_datasources")," - one of ",(0,o.kt)("inlineCode",{parentName:"li"},'"ALL"')," (default) or ",(0,o.kt)("inlineCode",{parentName:"li"},'"LOCAL_ONLY"'),", determines whether to fetch data from remote\nsources or use only local data"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prefab_config_classpath_dir")," - the directory from which to load locally defined configuration. This data\nwill be overwritten by data pulled from remote sources. This value defaults to the root of your project (i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},'"."'),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prefab_config_override_dir")," - the directory from which to load local override data. Any data found will be\nloaded overtop of data pulled from remote sources. This value defaults to your ",(0,o.kt)("inlineCode",{parentName:"li"},"$HOME")," directory."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prefab_envs")," - one or more environment names from which to load local configuration and overrides.\nSee ",(0,o.kt)("a",{parentName:"li",href:"#module-local-config-and-overrides"},"Local config and overrides")," below for additional information."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"on_no_default")," - one of ",(0,o.kt)("inlineCode",{parentName:"li"},'"RAISE"')," (default) or ",(0,o.kt)("inlineCode",{parentName:"li"},'"RETURN_NONE"'),". This determines how the client behaves when a request for\na config cannot find a value, and no default is supplied. These settings will, respectively, raise a ",(0,o.kt)("inlineCode",{parentName:"li"},"MissingDefaultException"),",\nor return ",(0,o.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"on_connection_failure")," - one of ",(0,o.kt)("inlineCode",{parentName:"li"},'"RETURN"')," (default) or ",(0,o.kt)("inlineCode",{parentName:"li"},'"RAISE"'),". This determines what should happen if the connection to\na remote datasource times out. These settings will, respectively, return whatever is in the local cache from the latest sync\nfrom the remote source, or else raise an ",(0,o.kt)("inlineCode",{parentName:"li"},"InitializationTimeoutException"),".")),(0,o.kt)("h2",{id:"start-the-client"},"Start the Client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from prefab_cloud_python import Client, Options\n\noptions = Options(...)\nclient = Client(options)\n")),(0,o.kt)("p",null,"Unless your options are configured to run using only local data, the client will attempt to connect to\nthe remote CDN and gRPC data sources and begin syncing data to a local store."),(0,o.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,o.kt)("h3",{id:"defaults"},"Defaults"),(0,o.kt)("p",null,"It is a best practice to specify a default value for all configuration. This\nreduces the likelihood of exceptions due to ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," values."),(0,o.kt)("p",null,"Here we ask for the value of a config named ",(0,o.kt)("inlineCode",{parentName:"p"},"max-jobs-per-second"),", and we specify\n",(0,o.kt)("inlineCode",{parentName:"p"},"10")," as a default value if no value is available."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'client.get("max-jobs-per-second", default=10) # => 10\n')),(0,o.kt)("p",null,"If no default is provided, the default behavior is to raise a ",(0,o.kt)("inlineCode",{parentName:"p"},"MissingDefaultException"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# raises a `MissingDefaultException`\nclient.get("max-jobs-per-second")\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you would prefer your application return ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," instead of raising an error,\nyou can set ",(0,o.kt)("inlineCode",{parentName:"p"},'on_no_default="RETURN_NONE"')," when creating your Options object."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},'options = Options(\n    ...\n    on_no_default="RETURN_NONE"\n)\nclient = Client(options)\nclient.get("max-jobs-per-second") # => None\n'))),(0,o.kt)("p",null,"You can specify defaults for your application by creating a file\n",(0,o.kt)("inlineCode",{parentName:"p"},".prefab.default.config.yaml")),(0,o.kt)("p",null,"Add the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# .prefab.default.config.yaml\nlog-level.prefab: info\nmy-first-int-config: 30\nmy-first-feature-flag: false\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/explanations/concepts//defaults"},"Learn more about defaults"),"."),(0,o.kt)("h3",{id:"getting-started"},"Getting Started"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'config_key = "my-first-int-config"\nprint(config_key, client.get(config_key))\n\nff_key = "my-first-feature-flag"\nprint(config_key, client.enabled(ff_key))\n')),(0,o.kt)("p",null,"Should output the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"my-first-int-config 30\nmy-first-feature-flag false\n")),(0,o.kt)("p",null,"Now create a config named ",(0,o.kt)("inlineCode",{parentName:"p"},"my-first-int-config")," in the Prefab UI. Set a default\nvalue to 50 and sync your change to the API."),(0,o.kt)("p",null,"Add a feature flag named ",(0,o.kt)("inlineCode",{parentName:"p"},"my-first-feature-flag")," in the Prefab UI. Add boolean\nvariants of ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". Set the inactive variant to false, make the flag\nactive and add a rule of type ",(0,o.kt)("inlineCode",{parentName:"p"},"ALWAYS_TRUE")," with the variant to serve as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),".\nRemember to sync your change to the API."),(0,o.kt)("p",null,"Run the code above again and you should see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"my-first-int-config 50\nmy-first-feature-flag true\n")),(0,o.kt)("p",null,"Congrats! You're ready to rock!"),(0,o.kt)("h2",{id:"feature-flags"},"Feature Flags"),(0,o.kt)("p",null,"Feature flags become more powerful when we give the flag evaluation ",(0,o.kt)("a",{parentName:"p",href:"/docs/explanations/features/rules-and-segmentation"},"rules")," more\ninformation to work with."),(0,o.kt)("p",null,"We do this by providing a ",(0,o.kt)("a",{parentName:"p",href:"/docs/explanations/concepts/context"},"context"),"\nfor the current user (and/or team, request, etc)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'context = {\n    "user": {\n        "key": 123,\n        "subscription_level": "pro",\n        "email": "bob@example.com"\n    },\n    "team": {\n        "key": 432,\n    },\n    "device": {\n        "key": "abcdef",\n        "mobile": False\n    }\n}\n\nresult = client.enabled("my-first-feature-flag", context=context)\n')),(0,o.kt)("p",null,"Feature flags don't have to return just true or false. You can get other data types using ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'client.get("ff-with-string", default="default-string", context=context)\nclient.get("ff-with-int", default=5)\n')),(0,o.kt)("h3",{id:"global-context"},"Global context"),(0,o.kt)("p",null,"To avoid having to pass a context explicitly to every call to ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"enabled"),", it is possible to set a thread-local\ncontext that will be evaluated as the default argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"context=")," if none is given."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from prefab_cloud_python import Context\ncontext = {\n    "user": {\n        "key": 123,\n        "subscription_level": "pro",\n        "email": "bob@example.com"\n    },\n    "team": {\n        "key": 432,\n    },\n    "device": {\n        "key": "abcdef",\n        "mobile": False\n    }\n}\n\nshared_context = Context(context)\n\nContext.set_current(shared_context)\n\n# with this set, the following two client calls are equivalent\n\nresult = client.enabled("my-first-feature-flag")\nresult = client.enabled("my-first-feature-flag", context=context)\n')),(0,o.kt)("h3",{id:"scoped-context"},"Scoped context"),(0,o.kt)("p",null,"It is also possible to scope a context for a particular block of code, without needing to set and unset\nthe thread-local context"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from prefab_cloud_python import Client\n\ncontext = {\n    "user": {\n        "key": 123,\n        "subscription_level": "pro",\n        "email": "bob@example.com"\n    },\n    "team": {\n        "key": 432,\n    },\n    "device": {\n        "key": "abcdef",\n        "mobile": False\n    }\n}\n\nwith Client.scoped_context(context):\n    result1 = client.enabled("my-first-feature-flag")\n\nresult2 = client.enabled("my-first-feature-flag", context=context)\n\nresult1 == result2 #=> True\n')),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("p",null,"Namespaces allow you to share config between many applications while still allowing you to override when necessary."),(0,o.kt)("p",null,"For instance, let's assume that all our code shares an HTTP library. We can configure the HTTP library to get its retry\ncount & timeout duration from our config store. We'll set ",(0,o.kt)("inlineCode",{parentName:"p"},"http.connection.retries")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"http.connection.timeout")," in the\ndefault namespace."),(0,o.kt)("p",null,"All of our apps should initialize their config store in a namespace. For instance our User service can initialize\nwith:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'options = Options(\n  namespace="services.user_service.web"\n)\n')),(0,o.kt)("p",null,'Prefab config will find the "closest" matching config when the UserService goes to look for a value of\nhttp.connection.timeout.'),(0,o.kt)("p",null,"If our service namespace is ",(0,o.kt)("inlineCode",{parentName:"p"},"services.user-service.web")," it will match overrides in namespaces ",(0,o.kt)("inlineCode",{parentName:"p"},"services"),"\n, ",(0,o.kt)("inlineCode",{parentName:"p"},"services.user_service"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"services.user_service.web"),", but not ",(0,o.kt)("inlineCode",{parentName:"p"},"services.user_service.cron")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"services.user_service.web.tools"),"."),(0,o.kt)("p",null,"Let's imagine that the ",(0,o.kt)("inlineCode",{parentName:"p"},"UserService")," starts to go down because too many requests are timing out to a 3rd party service. We\ncan quickly reduce the ",(0,o.kt)("inlineCode",{parentName:"p"},"http.connection.timeout")," for our ",(0,o.kt)("inlineCode",{parentName:"p"},"services.user_service")," namespace and solve the issue without\npushing code or restarting."),(0,o.kt)("h2",{id:"logging"},"Logging"),(0,o.kt)("p",null,"Prefab's Python Client comes with a powerful upgrade to the default Python ",(0,o.kt)("inlineCode",{parentName:"p"},"logging")," by building on top of ",(0,o.kt)("a",{parentName:"p",href:"https://www.structlog.org/en/stable/"},(0,o.kt)("inlineCode",{parentName:"a"},"structlog"))," to provide dynamic log levels."),(0,o.kt)("p",null,"To use it, use the logging functions included in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Client")," public API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"client.logger().debug(message)\nclient.logger().info(message)\nclient.logger().warn(message)\nclient.logger().error(message)\nclient.logger().critical(message)\n")),(0,o.kt)("p",null,"You can now control logging at any level of your stack. For convenience, we'll set these as local defaults in ",(0,o.kt)("inlineCode",{parentName:"p"},".prefab.default.config.yaml")," (",(0,o.kt)("a",{parentName:"p",href:"/docs/explanations/concepts/defaults"},"learn more"),") but you can set and tweak these on-the-fly in the Prefab web app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# .prefab.default.config.yaml\nlog-level.my_app.my_class: info\nlog-level.my_app.my_class.warn: warn\nlog-level.my_app.my_class.debug: debug\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# my_app/my_class.py\nclass MyClass:\n    def warn(self, client):\n        client.logger().warn("shown")\n        client.logger().info("never logs")\n        client.logger().debug("never logs")\n\n    def debug(self, client):\n        client.logger().warn("shown")\n        client.logger().info("shown")\n        client.logger().debug("shown")\n\n    def default(self, client):\n        client.logger().warn("shown")\n        client.logger().info("shown")\n        client.logger().debug("never logs")\n')),(0,o.kt)("h3",{id:"targeted-log-levels"},"Targeted Log Levels"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("a",{parentName:"p",href:"/docs/explanations/features/targeted-log-levels"},"Targeting")," to change your log levels based on the current user/request/device ",(0,o.kt)("a",{parentName:"p",href:"/docs/explanations/concepts/context"},"context")," using our ",(0,o.kt)("a",{parentName:"p",href:"/docs/explanations/features/rules-and-segmentation"},"rules")," engine."),(0,o.kt)("h3",{id:"log-levels"},"Log levels"),(0,o.kt)("p",null,"To be as language agnostic as possible, ",(0,o.kt)("inlineCode",{parentName:"p"},"Prefab")," provides a standardized\nsubset of log levels that can be mapped to language-specific log levels.\nThe language-agnostic levels are the levels that should be set in the Prefab\nUI or in your local overrides. The list below shows the mappings from Prefab\nlog levels to Python log levels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"Prefab => Python\n--------------------\ndebug  => :debug\ninfo   => :info\nwarn   => :warn\nerror  => :error\nfatal  => :critical\n")),(0,o.kt)("h2",{id:"local-overrides"},"Local Overrides"),(0,o.kt)("p",null,"It can be very useful to modify your defaults locally without changing the defaults file or values in the API. To do\nthis, add a file in your home directory or classpath called ",(0,o.kt)("inlineCode",{parentName:"p"},".prefab.default.config.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# .prefab.default.config.yaml\nmycorp.auth.api.url: "auth.staging.mycorp.com"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'#~/.prefab.default.config.yaml\nmycorp.auth.api.url: "localhost:9090"\n')),(0,o.kt)("p",null,"Prefab will first load the defaults, then merge the remote API values over the top, and finally it will apply the overrides file on\ntop of those values."),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"You can control the Prefab client's log level by changing the configuration value of ",(0,o.kt)("inlineCode",{parentName:"p"},"log-level.prefab"),". In the rare\ncase that you are trying to debug issues that occur before this config file has been read, set env var"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"PREFAB_LOG_CLIENT_BOOTSTRAP_LOG_LEVEL = debug\n")),(0,o.kt)("p",null,"By default this level is set to ",(0,o.kt)("inlineCode",{parentName:"p"},":warn")),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"Specify ",(0,o.kt)("inlineCode",{parentName:"p"},"LOCAL_ONLY")," and use your ",(0,o.kt)("a",{parentName:"p",href:"/docs/explanations/architecture/bootstrapping"},"config.yaml file"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'options = Options(data_sources="LOCAL_ONLY")\nclient = Client(options)\n')))}d.isMDXComponent=!0}}]);