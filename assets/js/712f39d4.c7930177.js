"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[4799],{4629:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var t=o(4848),r=o(8453);const l={title:"Python"},s=void 0,i={id:"sdks/python",title:"Python",description:"Getting Started with the Python SDK",source:"@site/docs/sdks/python.md",sourceDirName:"sdks",slug:"/sdks/python",permalink:"/docs/sdks/python",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/sdks/python.md",tags:[],version:"current",frontMatter:{title:"Python"},sidebar:"tutorialSidebar",previous:{title:"Netlify",permalink:"/docs/sdks/node/netlify"},next:{title:"React Native",permalink:"/docs/sdks/react-native"}},a={},c=[{value:"Getting Started with the Python SDK",id:"getting-started-with-the-python-sdk",level:2},{value:"Initialize Client",id:"initialize-client",level:2},{value:"Special Considerations with Forking servers like Gunicorn that use workers",id:"special-considerations-with-forking-servers-like-gunicorn-that-use-workers",level:4},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Defaults",id:"defaults",level:3},{value:"Getting Started",id:"getting-started",level:3},{value:"Feature Flags",id:"feature-flags",level:2},{value:"Thread-local context",id:"thread-local-context",level:3},{value:"Scoped context",id:"scoped-context",level:3},{value:"Logging",id:"logging",level:2},{value:"Targeted Log Levels",id:"targeted-log-levels",level:3},{value:"Log levels",id:"log-levels",level:3},{value:"Configuration for Standard Logging",id:"configuration-for-standard-logging",level:3},{value:"Configuration for Structlogger",id:"configuration-for-structlogger",level:3},{value:"Uvicorn Logging",id:"uvicorn-logging",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Testing",id:"testing",level:2},{value:"Reference",id:"reference",level:2},{value:"Available <code>Option</code> parameters",id:"available-option-parameters",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"getting-started-with-the-python-sdk",children:"Getting Started with the Python SDK"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"prefab_cloud_python"})," to your package dependencies"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# pyproject.toml\n[tool.poetry.dependencies]\nprefab-cloud-python = "^0.10.3"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"initialize-client",children:"Initialize Client"}),"\n",(0,t.jsxs)(n.p,{children:["If you set ",(0,t.jsx)(n.code,{children:"PREFAB_API_KEY"})," as an environment variable, initializing the client is as easy as"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import prefab_cloud_python\n\nprefab_cloud_python.set_options(prefab_cloud_python.Options()) # reads PREFAB_API_KEY env var\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"Unless your options are configured to run using only local data, the client will attempt to connect to\nthe remote CDN."}),"\n",(0,t.jsxs)(o,{className:"alert--warning",children:[(0,t.jsx)("summary",{children:(0,t.jsx)(n.h4,{id:"special-considerations-with-forking-servers-like-gunicorn-that-use-workers",children:"Special Considerations with Forking servers like Gunicorn that use workers"})}),(0,t.jsx)(n.p,{children:"Webservers like gunicorn can be configured to either use threads or fork child process workers. When forking, the prefab client must be re-created in order to continue to fetch updated configuration."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\n# gunicorn configuration hook\ndef post_worker_init(worker):\n    prefab_cloud_python.reset_instance()\n"})}),(0,t.jsx)(n.p,{children:"You may also do something like using uWSGI decorators"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\n@uwsgidecorators.postfork\ndef post_fork():\n    prefab_cloud_python.reset_instance()\n"})}),(0,t.jsxs)(n.p,{children:["This clears the package-singleton client and on the next ",(0,t.jsx)(n.code,{children:"prefab_cloud_python.get_client()"})," it will be recreated with the options previously set with ",(0,t.jsx)(n.code,{children:"set_options()"})]})]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"defaults",children:"Defaults"}),"\n",(0,t.jsxs)(n.p,{children:["Here we ask for the value of a config named ",(0,t.jsx)(n.code,{children:"max-jobs-per-second"}),", and we specify\n",(0,t.jsx)(n.code,{children:"10"})," as a default value if no value is available."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'prefab_cloud_python.get_client().get("max-jobs-per-second", default=10) # => 10\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If no default is provided, the default behavior is to raise a ",(0,t.jsx)(n.code,{children:"MissingDefaultException"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# raises a `MissingDefaultException`\nprefab_cloud_python.get_client().get("max-jobs-per-second")\n'})}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)(n.p,{children:"Handling Undefined Configs"})}),(0,t.jsxs)(n.p,{children:["If you would prefer your application return ",(0,t.jsx)(n.code,{children:"None"})," instead of raising an error,\nyou can set ",(0,t.jsx)(n.code,{children:'on_no_default="RETURN_NONE"'})," when creating your Options object."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'options = Options(\n    ...\n    on_no_default="RETURN_NONE"\n)\nprefab_cloud_python.set_options(options)\nprefab_cloud_python.get_client().get("max-jobs-per-second") # => None\n'})})]}),"\n",(0,t.jsx)(n.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsxs)(n.p,{children:["Now create a config named ",(0,t.jsx)(n.code,{children:"my-first-int-config"})," in the Prefab UI. Set a default\nvalue to 50 and sync your change to the API."]}),"\n",(0,t.jsxs)(n.p,{children:["Add a feature flag named ",(0,t.jsx)(n.code,{children:"my-first-feature-flag"})," in the Prefab UI. Add boolean\nvariants of ",(0,t.jsx)(n.code,{children:"true"})," and ",(0,t.jsx)(n.code,{children:"false"}),". Set the inactive variant to false, make the flag\nactive and add a rule of type ",(0,t.jsx)(n.code,{children:"ALWAYS_TRUE"})," with the variant to serve as ",(0,t.jsx)(n.code,{children:"true"}),".\nRemember to sync your change to the API."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'config_key = "my-first-int-config"\nprint(config_key, prefab_cloud_python.get_client().get(config_key))\n\nff_key = "my-first-feature-flag"\nprint(config_key, prefab_cloud_python.get_client().enabled(ff_key))\n'})}),"\n",(0,t.jsx)(n.p,{children:"Run the code above and you should see:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"my-first-int-config 50\nmy-first-feature-flag true\n"})}),"\n",(0,t.jsx)(n.p,{children:"Congrats! You're ready to rock!"}),"\n",(0,t.jsx)(n.h2,{id:"feature-flags",children:"Feature Flags"}),"\n",(0,t.jsxs)(n.p,{children:["Feature flags become more powerful when we give the flag evaluation ",(0,t.jsx)(n.a,{href:"/docs/explanations/features/rules-and-segmentation",children:"rules"})," more\ninformation to work with."]}),"\n",(0,t.jsxs)(n.p,{children:["We do this by providing a ",(0,t.jsx)(n.a,{href:"/docs/explanations/concepts/context",children:"context"}),"\nfor the current user (and/or team, request, etc)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'context = {\n    "user": {\n        "key": 123,\n        "subscription_level": "pro",\n        "email": "bob@example.com"\n    },\n    "team": {\n        "key": 432,\n    },\n    "device": {\n        "key": "abcdef",\n        "mobile": False\n    }\n}\n\nresult = prefab_cloud_python.get_client().enabled("my-first-feature-flag", context=context)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Feature flags don't have to return just true or false. You can get other data types using ",(0,t.jsx)(n.code,{children:"get"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'prefab_cloud_python.get_client().get("ff-with-string", default="default-string", context=context)\nprefab_cloud_python.get_client().get("ff-with-int", default=5)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"thread-local-context",children:"Thread-local context"}),"\n",(0,t.jsxs)(n.p,{children:["To avoid having to pass a context explicitly to every call to ",(0,t.jsx)(n.code,{children:"get"})," or ",(0,t.jsx)(n.code,{children:"enabled"}),", it is possible to set a thread-local\ncontext that will be evaluated as the default argument to ",(0,t.jsx)(n.code,{children:"context="})," if none is given."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from prefab_cloud_python import Context\ncontext = {\n    "user": {\n        "key": 123,\n        "subscription_level": "pro",\n        "email": "bob@example.com"\n    },\n    "team": {\n        "key": 432,\n    },\n    "device": {\n        "key": "abcdef",\n        "mobile": False\n    }\n}\n\nshared_context = Context(context)\n\nContext.set_current(shared_context)\n\n# with this set, the following two client calls are equivalent\n\nresult = prefab_cloud_python.get_client().enabled("my-first-feature-flag")\nresult = prefab_cloud_python.get_client().enabled("my-first-feature-flag", context=context)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"scoped-context",children:"Scoped context"}),"\n",(0,t.jsx)(n.p,{children:"It is also possible to scope a context for a particular block of code, without needing to set and unset\nthe thread-local context"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import prefab_cloud_python\nfrom prefab_cloud_python import Client\n\ncontext = {\n    "user": {\n        "key": 123,\n        "subscription_level": "pro",\n        "email": "bob@example.com"\n    },\n    "team": {\n        "key": 432,\n    },\n    "device": {\n        "key": "abcdef",\n        "mobile": False\n    }\n}\n\nwith Client.scoped_context(context):\n    result1 = prefab_cloud_python.get_client().enabled("my-first-feature-flag")\n\nresult2 = prefab_cloud_python.get_client().enabled("my-first-feature-flag", context=context)\n\nresult1 == result2 #=> True\n'})}),"\n",(0,t.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,t.jsxs)(n.p,{children:["Prefab's Python Client upgrades provides a logging filter that can be plugged into ",(0,t.jsx)(n.code,{children:"logging"})," or ",(0,t.jsx)(n.code,{children:"structlogger"})," to provide dynamic log levels. The client assumes your loggers are initialized with the name of each module, ie ",(0,t.jsx)(n.code,{children:"logger = logging.get_logger(__name__)"})]}),"\n",(0,t.jsx)(n.h3,{id:"targeted-log-levels",children:"Targeted Log Levels"}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.a,{href:"/docs/explanations/features/targeted-log-levels",children:"Targeting"})," to change your log levels based on the current user/request/device ",(0,t.jsx)(n.a,{href:"/docs/explanations/concepts/context",children:"context"})," using our ",(0,t.jsx)(n.a,{href:"/docs/explanations/features/rules-and-segmentation",children:"rules"})," engine."]}),"\n",(0,t.jsx)(n.h3,{id:"log-levels",children:"Log levels"}),"\n",(0,t.jsxs)(n.p,{children:["To be as language agnostic as possible, ",(0,t.jsx)(n.code,{children:"Prefab"})," provides a standardized\nsubset of log levels that can be mapped to language-specific log levels.\nThe language-agnostic levels are the levels that should be set in the Prefab\nUI or in your local overrides. The list below shows the mappings from Prefab\nlog levels to Python log levels"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Prefab => Python\n--------------------\ndebug  => :debug\ninfo   => :info\nwarn   => :warn\nerror  => :error\nfatal  => :critical\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-for-standard-logging",children:"Configuration for Standard Logging"}),"\n",(0,t.jsx)(n.p,{children:"In standard logging there are two steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create an instance of ",(0,t.jsx)(n.code,{children:"LoggerFilter"})," and configure it as a filter on the logging streamhandler"]}),"\n",(0,t.jsxs)(n.li,{children:["Set the root logger's loglevel to ",(0,t.jsx)(n.code,{children:"logging.DEBUG"})," so that the ",(0,t.jsx)(n.code,{children:"LoggerFilter"})," will see all the log records"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import logging\n\n # basic logging setup - yours may vary\n\nroot_logger = logging.getLogger()\nroot_logger.setLevel(logging.DEBUG) # set to DEBUG so that LoggerFilter will see all log records\nch = logging.StreamHandler(sys.stdout)\nch.setFormatter(\n    logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n)\nroot_logger.addHandler(ch)\n\n# key step - add the Prefab LoggerFilter to the StreamHandler\nch.addFilter(LoggerFilter())\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now your normal logging use cases eg"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'logger = logging.getLogger(__name__)\nlogger.debug("something")\n'})}),"\n",(0,t.jsx)(n.p,{children:"can be controlled dynamically from Prefab"}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"https://github.com/prefab-cloud/prefab-cloud-python/blob/main/examples/standard-logging/standard-logger-example.py",children:"example"})]}),"\n",(0,t.jsxs)(n.p,{children:["Note the LoggerFilter has an overrideable ",(0,t.jsx)(n.code,{children:"logger_name"})," method so you can subclass and determine your own logger name as needed"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-for-structlogger",children:"Configuration for Structlogger"}),"\n",(0,t.jsx)(n.p,{children:"The configuration below is for a structlogger setup backed by the standard logger."}),"\n",(0,t.jsxs)(n.p,{children:["Using the ",(0,t.jsx)(n.code,{children:"structlog.stdlib.LoggerFactory()"})," ensures the logger instances have names. The initial two processors ensure the log name and level are available on the event dictionary."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import structlog\n\n structlog.configure(\n        processors=[\n            structlog.stdlib.add_logger_name,\n            structlog.processors.add_log_level,\n            LoggerProcessor(),\n            structlog.processors.StackInfoRenderer(),\n            structlog.dev.set_exc_info,\n            structlog.processors.TimeStamper(fmt="%Y-%m-%d %H:%M:%S", utc=False),\n            structlog.dev.ConsoleRenderer(colors=True),\n        ],\n        logger_factory=structlog.stdlib.LoggerFactory(),  # Use Python\'s logging factory\n        wrapper_class=structlog.stdlib.BoundLogger\n    )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"https://github.com/prefab-cloud/prefab-cloud-python/blob/main/examples/structlogger/structlogger-example.py",children:"example"})]}),"\n",(0,t.jsxs)(n.p,{children:["Note the LoggerProcessor has an overrideable ",(0,t.jsx)(n.code,{children:"logger_name"})," method so you can subclass and determine your own logger name from elements on the logger record as needed."]}),"\n",(0,t.jsx)(n.p,{children:"Please contact us for help with your configuration if it varies from one of these standard cases."}),"\n",(0,t.jsx)(n.h3,{id:"uvicorn-logging",children:"Uvicorn Logging"}),"\n",(0,t.jsxs)(n.p,{children:["Uvicorn will default to setting up it's own logging. If you'd like to use your own logging configuration, you can do so by passing ",(0,t.jsx)(n.code,{children:"log_config=None"})," as shown below"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":   \n    uvicorn.run(app, host="0.0.0.0", port=8000, log_config=None)\n    # or\n    uvicorn.run("__main__:app", host="0.0.0.0", port=8000, log_config=None, reload=True)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsxs)(n.p,{children:["At this time, it's not possible to dynamically control the loglevel of the prefab client itself. Instead control the Prefab client's log level by changing the ",(0,t.jsx)(n.code,{children:"bootstrap_loglevel"})," in the ",(0,t.jsx)(n.code,{children:"Options"})," class at start up."]}),"\n",(0,t.jsxs)(n.p,{children:["By default this level is set to ",(0,t.jsx)(n.code,{children:"Logging.WARNING"})]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsxs)(n.p,{children:["Specify ",(0,t.jsx)(n.code,{children:"LOCAL_ONLY"})," and use your ",(0,t.jsx)(n.a,{href:"/docs/explanations/architecture/bootstrapping",children:"config.yaml file"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'prefab_cloud_python.set_options(Options(data_sources="LOCAL_ONLY")\nprefab_cloud_python.get_client()...\n'})}),"\n",(0,t.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,t.jsxs)(n.h3,{id:"available-option-parameters",children:["Available ",(0,t.jsx)(n.code,{children:"Option"})," parameters"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"api_key"})," - your prefab.cloud SDK API key"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefab_api_url"})," - the API endpoint your API key has been created for (i.e. ",(0,t.jsx)(n.code,{children:"https://api.prefab.cloud"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefab_datasources"})," - one of ",(0,t.jsx)(n.code,{children:'"ALL"'})," (default) or ",(0,t.jsx)(n.code,{children:'"LOCAL_ONLY"'}),", determines whether to fetch data from remote\nsources or use only local data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefab_config_classpath_dir"})," - the directory from which to load locally defined configuration. This data\nwill be overwritten by data pulled from remote sources. This value defaults to the root of your project (i.e. ",(0,t.jsx)(n.code,{children:'"."'}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefab_config_override_dir"})," - the directory from which to load local override data. Any data found will be\nloaded overtop of data pulled from remote sources. This value defaults to your ",(0,t.jsx)(n.code,{children:"$HOME"})," directory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefab_envs"})," - one or more environment names from which to load local configuration and overrides.\nSee ",(0,t.jsx)(n.a,{href:"#module-local-config-and-overrides",children:"Local config and overrides"})," below for additional information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"on_no_default"})," - one of ",(0,t.jsx)(n.code,{children:'"RAISE"'})," (default) or ",(0,t.jsx)(n.code,{children:'"RETURN_NONE"'}),". This determines how the client behaves when a request for\na config cannot find a value, and no default is supplied. These settings will, respectively, raise a ",(0,t.jsx)(n.code,{children:"MissingDefaultException"}),",\nor return ",(0,t.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"on_connection_failure"})," - one of ",(0,t.jsx)(n.code,{children:'"RETURN"'})," (default) or ",(0,t.jsx)(n.code,{children:'"RAISE"'}),". This determines what should happen if the connection to\na remote datasource times out. These settings will, respectively, return whatever is in the local cache from the latest sync\nfrom the remote source, or else raise an ",(0,t.jsx)(n.code,{children:"InitializationTimeoutException"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"collect_sync_interval"})," - how often to send telemetry to Prefab (seconds, defaults to 30)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"collect_evaluation_summaries"})," - send aggregate data about config and feaure flag evaluations, results (defaults to True) ",(0,t.jsx)(n.strong,{children:"Evaluation Summary telemetry Implemented in v0.10+"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"collect_logs"})," - send aggregate logger volume data to Prefab (defaults to True)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"context_upload_mode"})," - send context information to prefab. Values (from the ",(0,t.jsx)(n.code,{children:"Options.ContextUploadMode"})," enum) are ",(0,t.jsx)(n.code,{children:"NONE"})," (don't send any context data), ",(0,t.jsx)(n.code,{children:"SHAPE_ONLY"})," to only send the schema of the contexts to prefab (field name, data types), ",(0,t.jsx)(n.code,{children:"PERIODIC_EXAMPLE"})," to send the data types AND the actual contexts being used to Prefab ",(0,t.jsx)(n.strong,{children:"Context telemetry Implemented in v0.10+"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"global_context"})," - an immutable global context to be used in all lookups. Use this for things like availability zone, machine type..."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"on_ready_callback"})," - register a single method to be called when the client has loaded its first configuration and is ready for use"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var t=o(6540);const r={},l=t.createContext(r);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);