"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[558],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(n),f=a,b=p["".concat(u,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(b,l(l({ref:t},c),{},{components:n})):r.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=f;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(7462),a=n(7294),o=n(6010),l=n(2466),i=n(6550),u=n(1980),s=n(7392),c=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[u,s]=b({queryString:n,groupId:r}),[p,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),g=(()=>{const e=u??p;return f({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!f({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),m(e)}),[s,m,o]),tabValues:o}}var g=n(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function x(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),r=s[n].value;r!==i&&(p(t),u(r))},f=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:f,onClick:d},l,{className:(0,o.Z)("tabs__item",h.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function k(e){const t=m(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},a.createElement(x,(0,r.Z)({},e,t)),a.createElement(y,(0,r.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return a.createElement(k,(0,r.Z)({key:String(t)},e))}},7090:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),o=n(4866);const l={title:"Context",sidebar_label:"Context",sidebar_position:3},i=void 0,u={unversionedId:"explanations/context",id:"explanations/context",title:"Context",description:"Contexts let you provide Prefab with knowledge about the current",source:"@site/docs/explanations/context.md",sourceDirName:"explanations",slug:"/explanations/context",permalink:"/docs/explanations/context",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/explanations/context.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Context",sidebar_label:"Context",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Bootstrapping",permalink:"/docs/explanations/bootstrapping"},next:{title:"Default Files",permalink:"/docs/explanations/defaults"}},s={},c=[{value:"Global context",id:"global-context",level:2},{value:"Dot notation",id:"dot-notation",level:2},{value:"Adding to and merging contexts",id:"adding-to-and-merging-contexts",level:2}],p=(d="TabItem",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const f={toc:c},b="wrapper";function m(e){let{components:t,...l}=e;return(0,a.kt)(b,(0,r.Z)({},f,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Contexts let you provide Prefab with knowledge about the current"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"request"),(0,a.kt)("li",{parentName:"ul"},"device"),(0,a.kt)("li",{parentName:"ul"},"user"),(0,a.kt)("li",{parentName:"ul"},"server"),(0,a.kt)("li",{parentName:"ul"},"etc.")),(0,a.kt)("p",null,"Contexts allow you to set this knowledge to be used when evaluating feature flags and ",(0,a.kt)("a",{parentName:"p",href:"./targeted-log-levels"},"targeted log levels")," without having to pass your context data deeply around your app."),(0,a.kt)("p",null,"In a web app, the life-cycle of contexts are the life-cycle of the request. You set context at the beginning of the request and then it is cleared out when the request finishes."),(0,a.kt)("p",null,"For feature flags, context usage is optional but a useful ergonomic -- you can always pass in your context just-in-time to your FF evaluations."),(0,a.kt)("p",null,"For usage examples, see your relevant SDK client documentation."),(0,a.kt)("h2",{id:"global-context"},"Global context"),(0,a.kt)("p",null,"To avoid deeply passing around awareness of the current user, request, etc., Prefab allows you to set Context globally. The mechanisms for doing so will vary by language and framework."),(0,a.kt)("p",null,"When global context is set, log levels and feature flags will evaluate in that context. If you provide just-in-time context to your FF evaluations, it will be merged with the global context. More on merging below."),(0,a.kt)(o.Z,{groupId:"lang",mdxType:"Tabs"},(0,a.kt)(p,{value:"ruby",label:"Ruby",mdxType:"TabItem"},(0,a.kt)("p",null,"We can use a block to specify the context for the duration of the block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"context = { device: { mobile: mobile? } }\n\n$prefab.with_context(context) do\n  # ...\nend\n"))),(0,a.kt)(p,{value:"ror",label:"Ruby on Rails",mdxType:"TabItem"},(0,a.kt)("p",null,"We can use an ",(0,a.kt)("inlineCode",{parentName:"p"},"around_action")," to set our context for the life-cycle of the request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"\nclass ApplicationController < ActionController::Base\n  around_action :set_prefab_context\n\n  def set_prefab_context\n    $prefab.with_context(context) do\n      yield\n    end\n  end\n\n  def context\n    {\n      device: {\n        mobile: mobile?\n      }\n      user: current_user&.to_context\n      # ...\n    }\n  end\nend\n\n")),(0,a.kt)("p",null,"Learn more with the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prefab-cloud/example-rails-app"},"Prefab + Rails example app"))),(0,a.kt)(p,{value:"micronaut",label:"Micronaut",mdxType:"TabItem"},(0,a.kt)("p",null,"In your Prefab options, set your Prefab Context store to be your ServerRequestContextStore."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"options.setContextStore(new ServerRequestContextStore());\n")),(0,a.kt)("p",null,"Next we add a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prefab-cloud/example-micronaut-app/blob/configure-prefab-context/src/main/java/com/example/prefab/PrefabContextFilter.java"},"filter"),' to add a prefab context based on the currently "logged in" user.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'configClient.getContextStore()\n      .addContext(PrefabContext.newBuilder("user")\n          .put("id", user.id())\n          .put("country", user.country())\n          .put("email", user.email())\n          .build()\n      );\n')),(0,a.kt)("p",null,"Learn more with the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prefab-cloud/example-micronaut-app"},"Prefab + Micronaut example app"))),(0,a.kt)(p,{value:"dropwizard",label:"Dropwizard",mdxType:"TabItem"},(0,a.kt)("p",null,"Use a ",(0,a.kt)("inlineCode",{parentName:"p"},"ContainerRequestFilter")," to set the context for your request when the request begins"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class PrefabContextAddingRequestFilter implements ContainerRequestFilter {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PrefabContextAddingRequestFilter.class);\n    private final ConfigClient configClient;\n\n    @Inject\n    public PrefabContextAddingRequestFilter(ConfigClient configClient) {\n        this.configClient = configClient;\n    }\n\n    @Override\n    public void filter(ContainerRequestContext containerRequestContext) throws IOException {\n        final SecurityContext securityContext =\n                containerRequestContext.getSecurityContext();\n        if (securityContext != null) {\n            Principal principal = securityContext.getUserPrincipal();\n            if (principal instanceof User) {\n                User user = (User) principal;\n                LOGGER.info("will add pf context for {}", user);\n                configClient.getContextStore().addContext(PrefabContext.newBuilder("User")\n                        .put("name", user.getName())\n                        .build());\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Then we'll add another ",(0,a.kt)("inlineCode",{parentName:"p"},"ContainerResponseFilter")," to clear the context when the request finishes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class PrefabContexClearingResponseFilter implements ContainerResponseFilter {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PrefabContexClearingResponseFilter.class);\n    private final ConfigClient configClient;\n\n    @Inject\n    PrefabContexClearingResponseFilter(ConfigClient configClient) {\n        this.configClient = configClient;\n    }\n\n    @Override\n    public void filter(ContainerRequestContext containerRequestContext, ContainerResponseContext containerResponseContext) throws IOException {\n        configClient.getContextStore().clearContexts();\n        LOGGER.info("Cleared context");\n    }\n}\n')),(0,a.kt)("p",null,"Learn more with the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prefab-cloud/example-dropwizard-app"},"Prefab + Dropwizard example app")))),(0,a.kt)("h2",{id:"dot-notation"},"Dot notation"),(0,a.kt)("p",null,"When referencing fields from context, we use dot notation."),(0,a.kt)("p",null,"Given the context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'{\n  user: {\n    email: "test@example.com",\n    tracking_id: user.tracking_id,\n  },\n\n  device: {\n    mobile: true,\n  },\n}\n')),(0,a.kt)("p",null,"You can reference mobile as ",(0,a.kt)("inlineCode",{parentName:"p"},"device.mobile")," and tracking_id as ",(0,a.kt)("inlineCode",{parentName:"p"},"user.tracking_id")," in the property field in the UI."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"dot notation in UI",src:n(2215).Z,width:"1132",height:"197"})),(0,a.kt)("h2",{id:"adding-to-and-merging-contexts"},"Adding to and merging contexts"),(0,a.kt)("p",null,"Contexts have keys. When you provide a key that conflicts with an existing context key, your new context values will clobber any previous values under that key."),(0,a.kt)("p",null,'Let\'s use this example as our initial context. It has two keys: "request" and "subscription"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  request: {\n    mobile: true,\n    country: "US"\n  },\n  subscription: {\n    allow_overages: false,\n    plan: "Pro"\n  }\n}\n')),(0,a.kt)("p",null,'If we set the "request" context to ',(0,a.kt)("inlineCode",{parentName:"p"},'{ id: "f1e6461a" }')," then we lose the ",(0,a.kt)("inlineCode",{parentName:"p"},"mobile")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"country"),' attributes of our "request" context. Our current context is now'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  request: {\n    id: "f1e6461a"\n  },\n  subscription: {\n    allow_overages: false,\n    plan: "Pro"\n  }\n}\n')),(0,a.kt)("p",null,"If we provide JIT context to a flag then the JIT keys clobber the current context keys only for the duration of the evaluation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'jit_context = {\n  subscription: { allow_overages: true },\n  user: { admin: true }\n}\n\n$prefab.enabled?("my.flag.name", jit_context)\n')),(0,a.kt)("p",null,"That ",(0,a.kt)("inlineCode",{parentName:"p"},"enabled?")," check uses this context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  request: { id: "f1e6461a" },\n  subscription: { allow_overages: true },\n  user: { admin: true }\n}\n')),(0,a.kt)("p",null,"But then the current context after that evaluation is still"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  request: {\n    id: "f1e6461a"\n  },\n  subscription: {\n    allow_overages: false,\n    plan: "Pro"\n  }\n}\n')),(0,a.kt)("p",null,"You can, of course, do your own merging before re-setting the context key."))}m.isMDXComponent=!0},2215:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/dot-notation-9d1f20824de800a311f6018055d0b024.png"}}]);