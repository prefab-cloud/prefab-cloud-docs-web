"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[4196],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>f});var a=n(6540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=l,f=p["".concat(s,".").concat(d)]||p[d]||g[d]||r;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4506:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(8168),l=(n(6540),n(5680));const r={title:"Go"},o=void 0,i={unversionedId:"sdks/go",id:"sdks/go",title:"Go",description:"Install the latest version",source:"@site/docs/sdks/go.md",sourceDirName:"sdks",slug:"/sdks/go",permalink:"/docs/sdks/go",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/sdks/go.md",tags:[],version:"current",frontMatter:{title:"Go"},sidebar:"tutorialSidebar",previous:{title:"Elixir",permalink:"/docs/sdks/elixir"},next:{title:"Java",permalink:"/docs/sdks/java"}},s={},u=[{value:"Install the latest version",id:"install-the-latest-version",level:2},{value:"Initialize Client",id:"initialize-client",level:2},{value:"Feature Flags",id:"feature-flags",level:2},{value:"Context",id:"context",level:2},{value:"Global Context",id:"global-context",level:3},{value:"Bound Context",id:"bound-context",level:3},{value:"Just-in-time Context",id:"just-in-time-context",level:3},{value:"Dynamic Config",id:"dynamic-config",level:2},{value:"Default Values for Configs",id:"default-values-for-configs",level:4},{value:"Testing",id:"testing",level:2},{value:"Notable pending features",id:"notable-pending-features",level:2}],c={toc:u},p="wrapper";function g(e){let{components:t,...n}=e;return(0,l.yg)(p,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"install-the-latest-version"},"Install the latest version"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"go get github.com/prefab-cloud/prefab-cloud-go@latest\n")),(0,l.yg)("h2",{id:"initialize-client"},"Initialize Client"),(0,l.yg)("p",null,"Add ",(0,l.yg)("inlineCode",{parentName:"p"},'prefab "github.com/prefab-cloud/prefab-cloud-go/pkg"')," to your imports."),(0,l.yg)("p",null,"Then, initialize the client with your API key:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},"client, err := prefab.NewClient(prefab.WithAPIKey(apiKey))\n")),(0,l.yg)("h2",{id:"feature-flags"},"Feature Flags"),(0,l.yg)("p",null,"For boolean flags, you can use the ",(0,l.yg)("inlineCode",{parentName:"p"},"FeatureIsOn")," function:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},'enabled, ok := client.FeatureIsOn("my.feature.name", prefab.ContextSet{})\n')),(0,l.yg)("p",null,"Flags that don't exist yet are considered off, so you can happily add ",(0,l.yg)("inlineCode",{parentName:"p"},"FeatureIsOn")," checks to your code before the flag is created."),(0,l.yg)("details",{className:"alert--info"},(0,l.yg)("summary",null,"Feature flags don't have to return just true or false."),(0,l.yg)("p",null,"You can get other data types using ",(0,l.yg)("inlineCode",{parentName:"p"},"Get*")," functions:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},'value, ok, err := client.GetStringValue("my.string.feature.name", prefab.ContextSet{})\nvalue, ok, err := client.GetJSONValue("my.json.feature.name", prefab.ContextSet{})\n'))),(0,l.yg)("h2",{id:"context"},"Context"),(0,l.yg)("p",null,"Feature flags become more powerful when we give the flag evaluation rules more information to work with. We do this by providing ",(0,l.yg)("a",{parentName:"p",href:"/docs/explanations/concepts/context"},"context")," of the current user (and/or team, request, etc.)"),(0,l.yg)("h3",{id:"global-context"},"Global Context"),(0,l.yg)("p",null,"When initializing the client, you can set a global context that will be used for all evaluations."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},'globalContext := prefab.NewContextSet().\n    WithNamedContextValues("host", map[string]interface{}{\n        "name": os.Getenv("HOSTNAME"),\n        "region":   os.Getenv("REGION"),\n        "cpu":      runtime.NumCPU(),\n    })\n\n\nclient, err := prefab.NewClient(\n    prefab.WithAPIKey(apiKey),\n    prefab.WithGlobalContext(globalContext),\n)\n')),(0,l.yg)("p",null,"Global context is the least specific context and will be overridden by more specific context passed in at the time of evaluation."),(0,l.yg)("h3",{id:"bound-context"},"Bound Context"),(0,l.yg)("p",null,"To make the best use of Prefab in a web setting, we recommend setting ",(0,l.yg)("a",{parentName:"p",href:"/docs/explanations/concepts/context"},"context")," per-request. Setting this context for the life-cycle of the request means the Prefab logger can be aware of your user/etc. for feature flags and ",(0,l.yg)("a",{parentName:"p",href:"/docs/explanations/features/targeted-log-levels"},"targeted log levels")," and you won't have to explicitly pass context into your ",(0,l.yg)("inlineCode",{parentName:"p"},".FeatureIsOn")," and ",(0,l.yg)("inlineCode",{parentName:"p"},".Get*")," calls."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},'requestContext := prefab.NewContextSet().\n    WithNamedContextValues("user", map[string]interface{}{\n        "name":  currentUser.GetName(),\n        "email": currentUser.GetEmail(),\n    })\n\nboundClient := client.WithContext(requestContext)\nenabled, ok := boundClient.FeatureIsOn("my.feature.name", prefab.ContextSet{})\n')),(0,l.yg)("h3",{id:"just-in-time-context"},"Just-in-time Context"),(0,l.yg)("p",null,"You can also pass context when evaluating individual flags or config values."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-ruby"},'enabled, ok := boundClient.FeatureIsOn("my.feature.name", prefab.NewContextSet().\n    WithNamedContextValues("team", map[string]interface{}{\n        "name":  currentTeam.GetName(),\n        "email": currentTeam.GetEmail(),\n    }))\n')),(0,l.yg)("h2",{id:"dynamic-config"},"Dynamic Config"),(0,l.yg)("p",null,"Config values are available via the ",(0,l.yg)("inlineCode",{parentName:"p"},"Get*")," functions:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},'value, ok, err := client.GetJSONValue("slack.bot.config", prefab.ContextSet{})\n\nvalue, ok, err := client.GetStringValue("some.string.config", prefab.ContextSet{})\n\nvalue, ok, err := client.GetFloatValue("some.float.config", prefab.ContextSet{})\n')),(0,l.yg)("details",null,(0,l.yg)("summary",null,(0,l.yg)("h4",{id:"default-values-for-configs"},"Default Values for Configs")),(0,l.yg)("p",null,"Here we ask for the value of a config named ",(0,l.yg)("inlineCode",{parentName:"p"},"max-jobs-per-second"),", and we specify ",(0,l.yg)("inlineCode",{parentName:"p"},"10")," as a default value if no value is available."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-ruby"},'value, wasFound := client.GetIntValueWithDefault("max-jobs-per-second", 10, prefab.ContextSet{})\n')),(0,l.yg)("p",null,"If ",(0,l.yg)("inlineCode",{parentName:"p"},"max-jobs-per-second")," is available, ",(0,l.yg)("inlineCode",{parentName:"p"},"wasFound")," will be ",(0,l.yg)("inlineCode",{parentName:"p"},"true")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"value")," will be the value of the config. If ",(0,l.yg)("inlineCode",{parentName:"p"},"max-jobs-per-second")," is not available, ",(0,l.yg)("inlineCode",{parentName:"p"},"wasFound")," will be ",(0,l.yg)("inlineCode",{parentName:"p"},"false")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"value")," will be ",(0,l.yg)("inlineCode",{parentName:"p"},"10"),".")),(0,l.yg)("h2",{id:"testing"},"Testing"),(0,l.yg)("p",null,"You can use a datafile for consistency, reproducibility, and offline testing. See ",(0,l.yg)("a",{parentName:"p",href:"/docs/explanations/concepts/testing#testing-with-datafiles"},"Testing with DataFiles"),"."),(0,l.yg)("p",null,"If you need to test multiple scenarios that depend on a single config or feature key, you can change set up a client with in-memory configs:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},'configs := map[string]interface{}{\n    "string.key": "value",\n    "int.key":    int64(42),\n    "bool.key":   true,\n    "float.key":  3.14,\n    "slice.key":  []string{"a", "b", "c"},\n    "json.key": map[string]interface{}{\n        "nested": "value",\n    },\n}\n\nclient, err := prefab.NewClient(prefab.WithConfigs(configs))\n')),(0,l.yg)("h2",{id:"notable-pending-features"},"Notable pending features"),(0,l.yg)("p",null,"The following notable features are still in-progress for the Go client:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Telemetry"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"../tools/editor-tools"},"Editor Tools")," support")))}g.isMDXComponent=!0}}]);