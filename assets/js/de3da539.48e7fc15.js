"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[299],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=r,b=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(b,o(o({ref:n},p),{},{components:t})):a.createElement(b,o({ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3373:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const i={title:"Namespaces",sidebar_label:"Namespaces",sidebar_position:4},o=void 0,s={unversionedId:"explanations/concepts/namespaces",id:"explanations/concepts/namespaces",title:"Namespaces",description:"Targetting Dynamic Configuration With Namespaces",source:"@site/docs/explanations/concepts/namespaces.md",sourceDirName:"explanations/concepts",slug:"/explanations/concepts/namespaces",permalink:"/docs/explanations/concepts/namespaces",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/explanations/concepts/namespaces.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Namespaces",sidebar_label:"Namespaces",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Default Files",permalink:"/docs/explanations/concepts/defaults"},next:{title:"Testing",permalink:"/docs/explanations/concepts/testing"}},c={},l=[{value:"Targetting Dynamic Configuration With Namespaces",id:"targetting-dynamic-configuration-with-namespaces",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},u=p("Tabs"),m=p("TabItem"),d={toc:l},b="wrapper";function f(e){let{components:n,...i}=e;return(0,r.kt)(b,(0,a.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"targetting-dynamic-configuration-with-namespaces"},"Targetting Dynamic Configuration With Namespaces"),(0,r.kt)("p",null,"Namespaces allow you to share config amongst many applications while still allowing you to override when necessary."),(0,r.kt)("p",null,"For instance, let's assume that all our code shares an HTTP library. We can configure the HTTP library to get its retry count & timeout duration from our config store.\nWe'll set ",(0,r.kt)("inlineCode",{parentName:"p"},"http.connection.retries")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"http.connection.timeout")," in the default namespace."),(0,r.kt)("p",null,"All of our apps should initialize their config store in a namespace. For instance our User Service may have clients in the namespaces:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'Prefab::Options.new(namespace: "userservice.web.app")')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'Prefab::Options.new(namespace: "userservice.daemon.sidekiq")')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'Prefab::Options.new(namespace: "userservice.cron.sync-to-billing")')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'Prefab::Options.new(namespace: "userservice.cron.cleanup-job")'))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"It's likely that you have a good namespace already defined as a tag on your pod. Something like ",(0,r.kt)("inlineCode",{parentName:"p"},'namespace = (ENV[\'DEPLOYED_NAME\'] || "").gsub("-",".")')," may be just what you're looking for.")),(0,r.kt)("p",null,'Prefab config will find the "closest" matching config when the UserService goes to look for a value of ',(0,r.kt)("inlineCode",{parentName:"p"},"http.connection.timeout"),"."),(0,r.kt)("p",null,"Let's imagine that the UserService starts to go down because too many requests are timing out to a our billing service. We can quickly reduce the ",(0,r.kt)("inlineCode",{parentName:"p"},"http.connection.timeout")," for our ",(0,r.kt)("inlineCode",{parentName:"p"},"userservice.cron.sync-to-billing")," namespace and solve the issue without pushing code or restarting."),(0,r.kt)("p",null,"With the following values"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"namespaces for http-retries",src:t(3853).Z,width:"701",height:"306"})),(0,r.kt)(u,{groupId:"lang",mdxType:"Tabs"},(0,r.kt)(m,{value:"ruby",label:"Ruby",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'# staging\nclient = Prefab::Client.new(Prefab::Options.new())\nclient.get("http.connection.retries") # returns 1\n\n# staging\nclient = Prefab::Client.new(Prefab::Options.new(namespace: "userservice.cron.sync-to-billing"))\nclient.get("http.connection.retries") # returns 1\n\n# production\nclient = Prefab::Client.new(Prefab::Options.new(namespace: "userservice.web.web"))\nclient.get("http.connection.retries") # returns 3\n\n# production\nclient = Prefab::Client.new(Prefab::Options.new(namespace: "userservice.cron.sync-to-billing"))\nclient.get("http.connection.retries") # returns 0\n\n'))),(0,r.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import prefab, { Identity } from "@prefab-cloud/prefab-cloud-js";\n\nconst options = {\n  apiKey: "YOUR_CLIENT_API_KEY",\n  namespace: "userservice.web.web",\n  identity: new Identity("user-1234", { device: "desktop" }),\n};\nawait prefab.init(options);\n\nprefab.get("http.connection.retries"); //returns 3 in production\n\n// Changing namespaces requires you to `init` again.\noptions.namespace = "userservice.cron.sync-to-billing";\nawait prefab.init(options);\n\nprefab.get("http.connection.retries"); //returns 0 in production\n'))),(0,r.kt)(m,{value:"elixir",label:"Elixir",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'# staging\nclient = Prefab.Client.new(Prefab.Options.new)\nPrefab.Client.get(client, "http.connection.retries") # => 1\n\n# staging\nclient = Prefab.Client.new(Prefab.Options.new(namespace: "userservice.cron.sync-to-billing"))\nPrefab.Client.get(client, "http.connection.retries") # => 1\n\n# production\nclient = Prefab.Client.new(Prefab.Options.new(namespace: "userservice.web.web"))\nPrefab.Client.get(client, "http.connection.retries") # => 3\n\n# production\nclient = Prefab.Client.new(Prefab.Options.new(namespace: "userservice.cron.sync-to-billing"))\nPrefab.Client.get(client, "http.connection.retries") # => 0\n\n')))))}f.isMDXComponent=!0},3853:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/namespace-retries-9ba98d250bcdce0f96498e03de16b08c.png"}}]);