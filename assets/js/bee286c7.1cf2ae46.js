"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[55],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),u=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(r),f=n,b=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return r?o.createElement(b,l(l({ref:t},c),{},{components:r})):o.createElement(b,l({ref:t},c))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:n,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7577:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=r(7462),n=(r(7294),r(3905));const a={title:"Rollouts",sidebar_label:"Rollouts"},l=void 0,i={unversionedId:"how-tos/rollouts",id:"how-tos/rollouts",title:"Rollouts",description:"Using Prefab For Rollouts",source:"@site/docs/how-tos/rollouts.md",sourceDirName:"how-tos",slug:"/how-tos/rollouts",permalink:"/docs/how-tos/rollouts",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/how-tos/rollouts.md",tags:[],version:"current",frontMatter:{title:"Rollouts",sidebar_label:"Rollouts"},sidebar:"tutorialSidebar",previous:{title:"Beta Releases",permalink:"/docs/how-tos/beta-releases"},next:{title:"Tracking IDs",permalink:"/docs/how-tos/tracking-ids"}},s={},u=[{value:"Using Prefab For Rollouts",id:"using-prefab-for-rollouts",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},p=c("Tabs"),d=c("TabItem"),f={toc:u},b="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(b,(0,o.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"using-prefab-for-rollouts"},"Using Prefab For Rollouts"),(0,n.kt)("p",null,"So you've built a new pipeline and are hoping to slowly dial up how much traffic uses it. You've got two great ways to\ndo that with Prefab."),(0,n.kt)("p",null,"One approach is to simply use dynamic config. We can use a floating point number to specify the percent of traffic we\nwant to rollout to and then evaluate that against a random number to determine whether to run the new code."),(0,n.kt)(p,{groupId:"lang",mdxType:"Tabs"},(0,n.kt)(d,{value:"ruby",label:"Ruby",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},'if rand() < @config.get_float("percent-to-rollout")\n  do_new_pipeline\nend\n')))),(0,n.kt)("p",null,"This approach works fine, but each evaluation of ",(0,n.kt)("inlineCode",{parentName:"p"},"rand()")," will get you a different result. Sometimes this is what you\nwant, but if you'd like the rollout to be sticky and keep server, requests, users in the new pipeline you may want to use a feature flag."),(0,n.kt)(p,{groupId:"lang",mdxType:"Tabs"},(0,n.kt)(d,{value:"ruby",label:"Ruby",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ruby"},'Prefab.enabled? "new-feature", { user: { tracking_id: user.tracking_id } }\n')))))}m.isMDXComponent=!0}}]);