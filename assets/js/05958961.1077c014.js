"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[4046],{1782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=n(4848),i=n(8453);const a={title:"Testing",sidebar_label:"Testing",sidebar_position:5},o=void 0,r={id:"explanations/concepts/testing",title:"Testing",description:"Our SDKs and Clients provide library and language-specific testing advice. For specific details, refer to the docs for the SDK or client you're using.",source:"@site/docs/explanations/concepts/testing.md",sourceDirName:"explanations/concepts",slug:"/explanations/concepts/testing",permalink:"/docs/explanations/concepts/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/explanations/concepts/testing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Testing",sidebar_label:"Testing",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"DataFiles",permalink:"/docs/explanations/concepts/datafiles"},next:{title:"Zero-ms Frontend Feature Flags",permalink:"/docs/explanations/concepts/zero-ms-frontend-feature-flags"}},c={},l=[{value:"Best Practices For Testing",id:"best-practices-for-testing",level:3},{value:"Mocking",id:"mocking",level:2},{value:"Backend SDKs",id:"backend-sdks",level:3},{value:"Frontend Libraries",id:"frontend-libraries",level:3},{value:"Testing with DataFiles",id:"testing-with-datafiles",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components},{TabItem:n,Tabs:a}=t;return n||u("TabItem",!0),a||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"Our SDKs and Clients provide library and language-specific testing advice. For specific details, refer to the docs for the SDK or client you're using."})}),"\n",(0,s.jsx)(t.p,{children:"Testing is a first-class citizen in Prefab. We've designed it so that it is easy to test your code that uses Prefab."}),"\n",(0,s.jsx)(t.h3,{id:"best-practices-for-testing",children:"Best Practices For Testing"}),"\n",(0,s.jsxs)(t.p,{children:["The best practice for testing is to create a test environment and use a ",(0,s.jsx)(t.a,{href:"./datafiles",children:"datafile"}),". A datafile is a JSON snapshot of your configuration, which allows the Prefab client to boot up in a consistent state without talking to the Prefab server."]}),"\n",(0,s.jsx)(t.p,{children:"You can then use mocking to override specific values as-needed, when you are testing the behavior of a particular feature flag or config."}),"\n",(0,s.jsx)(t.h2,{id:"mocking",children:"Mocking"}),"\n",(0,s.jsx)(t.h3,{id:"backend-sdks",children:"Backend SDKs"}),"\n",(0,s.jsx)(t.p,{children:"The primary way to test Prefab is by mocking out calls to Prefab. Here are some examples:"}),"\n",(0,s.jsxs)(a,{groupId:"lang",children:[(0,s.jsx)(n,{value:"java",label:"Java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Test\nvoid testPrefab(){\n  ConfigClient mockConfigClient = mock(ConfigClient.class);\n  when(mockConfigClient.liveString("sample.string")).thenReturn(FixedValue.of("test value"));\n  when(mockConfigClient.liveLong("sample.long")).thenReturn(FixedValue.of(123L));\n\n  MyClass myClass = new MyClass(mock(ConfigClient.class));\n\n  // test business logic\n\n}\n'})})}),(0,s.jsx)(n,{value:"ruby",label:"Ruby",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"class Job < Array\n  def batches\n    slice_size = Prefab.get('job.batch.size')\n    each_slice(slice_size)\n  end\nend\n\nRSpec.describe Job do\n  describe '#batches' do\n    it 'returns batches of jobs' do\n      jobs = Job.new([1, 2, 3, 4, 5])\n      expect(jobs.batches.map(&:size)).to eq([3, 2])\n      allow(Prefab).to receive(:get).with('job.batch.size').and_return(2)\n      expect(jobs.batches.map(&:size)).to eq([2, 2, 1])\n    end\n  end\nend\n"})})})]}),"\n",(0,s.jsx)(t.h3,{id:"frontend-libraries",children:"Frontend Libraries"}),"\n",(0,s.jsxs)(t.p,{children:["Rather than talking to the server, use ",(0,s.jsx)(t.code,{children:"setConfig"})," or use a ",(0,s.jsx)(t.code,{children:"Provider"})," manually with your test setup."]}),"\n",(0,s.jsxs)(a,{groupId:"lang",children:[(0,s.jsxs)(n,{value:"javascript",label:"JavaScript",children:[(0,s.jsxs)(t.p,{children:["Don't call ",(0,s.jsx)(t.code,{children:"prefab.init"}),". Instead, use ",(0,s.jsx)(t.code,{children:"setConfig"})," to set up your scenario."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"prefab.setConfig({\n  turbo: true,\n  defaultMediaCount: 3,\n});\n"})}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"/docs/sdks/javascript#testing",children:"Read the full JavaScript testing docs."})})]}),(0,s.jsxs)(n,{value:"react",label:"React",children:[(0,s.jsxs)(t.p,{children:["Don't use the ",(0,s.jsx)(t.code,{children:"PrefabProvider"}),". Instead, use the ",(0,s.jsx)(t.code,{children:"PrefabTestProvider"})," and pass in a config object."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"<PrefabTestProvider config={config}>\n  <MyComponent />\n</PrefabTestProvider>,\n"})}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"/docs/sdks/react#testing",children:"Read the full React testing docs."})})]})]}),"\n",(0,s.jsx)(t.h2,{id:"testing-with-datafiles",children:"Testing with DataFiles"}),"\n",(0,s.jsxs)(t.p,{children:["Mocking out all of the Prefab calls can be tedious, so we've added a feature called ",(0,s.jsx)(t.a,{href:"./datafiles",children:"DataFiles"})," to Prefab."]}),"\n",(0,s.jsx)(t.p,{children:"Having your tests/CI reach out to Prefab to get the latest configuration is a viable approach, but for consistency & reproducibility, many of us prefer to have full control over the configuration used to run tests. Datafiles are perfect for this use case."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);