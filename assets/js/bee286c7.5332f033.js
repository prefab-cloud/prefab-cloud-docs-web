"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[3945],{9249:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var n=t(4848),r=t(8453);const s={title:"Rollouts",sidebar_label:"Rollouts"},l=void 0,a={id:"how-tos/rollouts",title:"Rollouts",description:"Using Prefab For Rollouts",source:"@site/docs/how-tos/rollouts.md",sourceDirName:"how-tos",slug:"/how-tos/rollouts",permalink:"/docs/how-tos/rollouts",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/how-tos/rollouts.md",tags:[],version:"current",frontMatter:{title:"Rollouts",sidebar_label:"Rollouts"},sidebar:"tutorialSidebar",previous:{title:"Offline Mode",permalink:"/docs/how-tos/offline-mode"},next:{title:"Tracking IDs",permalink:"/docs/how-tos/tracking-ids"}},i={},u=[{value:"Using Prefab For Rollouts",id:"using-prefab-for-rollouts",level:2}];function c(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components},{TabItem:t,Tabs:s}=o;return t||p("TabItem",!0),s||p("Tabs",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h2,{id:"using-prefab-for-rollouts",children:"Using Prefab For Rollouts"}),"\n",(0,n.jsx)(o.p,{children:"So you've built a new pipeline and are hoping to slowly dial up how much traffic uses it. You've got two great ways to\ndo that with Prefab."}),"\n",(0,n.jsx)(o.p,{children:"One approach is to simply use dynamic config. We can use a floating point number to specify the percent of traffic we\nwant to rollout to and then evaluate that against a random number to determine whether to run the new code."}),"\n",(0,n.jsx)(s,{groupId:"lang",children:(0,n.jsx)(t,{value:"ruby",label:"Ruby",children:(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ruby",children:'if rand() < @config.get_float("percent-to-rollout")\n  do_new_pipeline\nend\n'})})})}),"\n",(0,n.jsxs)(o.p,{children:["This approach works fine, but each evaluation of ",(0,n.jsx)(o.code,{children:"rand()"})," will get you a different result. Sometimes this is what you\nwant, but if you'd like the rollout to be sticky and keep server, requests, users in the new pipeline you may want to use a feature flag."]}),"\n",(0,n.jsx)(s,{groupId:"lang",children:(0,n.jsx)(t,{value:"ruby",label:"Ruby",children:(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ruby",children:'Prefab.enabled? "new-feature", { user: { tracking_id: user.tracking_id } }\n'})})})})]})}function d(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}function p(e,o){throw new Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,o,t)=>{t.d(o,{R:()=>l,x:()=>a});var n=t(6540);const r={},s=n.createContext(r);function l(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);