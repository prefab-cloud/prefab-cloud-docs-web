"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[19],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var f=r.createContext({}),s=function(e){var t=r.useContext(f),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(f.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,f=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),p=a,g=u["".concat(f,".").concat(p)]||u[p]||d[p]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var f in t)hasOwnProperty.call(t,f)&&(l[f]=t[f]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9144:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"Your First Config and Flag",sidebar_label:"Your First Config and Flag",sidebar_position:2},i=void 0,l={unversionedId:"tutorials/first-config-and-flag",id:"tutorials/first-config-and-flag",title:"Your First Config and Flag",description:"Your first config and flag",source:"@site/docs/tutorials/first-config-and-flag.md",sourceDirName:"tutorials",slug:"/tutorials/first-config-and-flag",permalink:"/docs/tutorials/first-config-and-flag",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/tutorials/first-config-and-flag.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Your First Config and Flag",sidebar_label:"Your First Config and Flag",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Get Started",permalink:"/docs/tutorials/get-started"},next:{title:"Setting Dynamic Log Levels",permalink:"/docs/tutorials/dynamic-logging"}},f={},s=[{value:"Your first config and flag",id:"your-first-config-and-flag",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"your-first-config-and-flag"},"Your first config and flag"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'config_key = "my-first-int-config"\nputs "#{config_key} is: #{Prefab.get(config_key)}"\n\nflag_name = "my-first-feature-flag"\nputs "#{flag_name} is: #{Prefab.enabled? flag_name}"\n')),(0,a.kt)("p",null,"Run these and you should see the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"my-first-int-config is: 30\nmy-first-feature-flag is: false\n")),(0,a.kt)("p",null,"Now create a config named ",(0,a.kt)("inlineCode",{parentName:"p"},"my-first-int-config")," in the Prefab UI. Set a default value to 50 and sync your change to the\nAPI."),(0,a.kt)("p",null,"Add a feature flag named ",(0,a.kt)("inlineCode",{parentName:"p"},"my-first-feature-flag")," in the Prefab UI. Add boolean variants of ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".\nSet the inactive variant to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),", make the flag active and add a rule of type ",(0,a.kt)("inlineCode",{parentName:"p"},"ALWAYS_TRUE")," with the variant to serve\nas ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),".\nRemember to sync your change to the API."),(0,a.kt)("p",null,"Run your command again and you should see:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"my-first-int-config is: 50\nmy-first-feature-flag is: true\n")),(0,a.kt)("p",null,"Congrats! You're ready to rock!"))}d.isMDXComponent=!0}}]);