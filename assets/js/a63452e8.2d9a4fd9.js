"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[993],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>m});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},g=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=l,m=p["".concat(s,".").concat(d)]||p[d]||u[d]||o;return n?r.createElement(m,a(a({ref:t},g),{},{components:n})):r.createElement(m,a({ref:t},g))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:l,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),l=(n(7294),n(3905));const o={title:"Setting Dynamic Log Levels",sidebar_label:"Setting Dynamic Log Levels",sidebar_position:3},a=void 0,i={unversionedId:"tutorials/dynamic-logging",id:"tutorials/dynamic-logging",title:"Setting Dynamic Log Levels",description:"Setting Dynamic Log Levels",source:"@site/docs/tutorials/dynamic-logging.md",sourceDirName:"tutorials",slug:"/tutorials/dynamic-logging",permalink:"/docs/tutorials/dynamic-logging",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/tutorials/dynamic-logging.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Setting Dynamic Log Levels",sidebar_label:"Setting Dynamic Log Levels",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Your First Config and Flag",permalink:"/docs/tutorials/first-config-and-flag"},next:{title:"Example Applications",permalink:"/docs/tutorials/example-applications"}},s={},c=[{value:"Setting Dynamic Log Levels",id:"setting-dynamic-log-levels",level:2},{value:"Targeted Log Levels",id:"targeted-log-levels",level:3}],g={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"setting-dynamic-log-levels"},"Setting Dynamic Log Levels"),(0,l.kt)("p",null,"An example here is worth a million words."),(0,l.kt)("p",null,"First add a simple controller."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},'class PrefabController < ApplicationController\n  def index\n    Rails.logger.warn "warn level logging"\n    Rails.logger.info "info level logging"\n    Rails.logger.debug "debug level logging"\n\n    render plain: "Loaded. Check your logs."\n  end\nend\n')),(0,l.kt)("p",null,"Next, we'll set the Rails logger to use our logger"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"#application.rb\nmodule MyApplication\n  class Application < Rails::Application\n    #...\n\n    Prefab.init\n    // highlight-next-line\n    Prefab.set_rails_loggers\n  end\nend\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Prefab.set_rails_loggers")," wraps the Rails logger to allow using ",(0,l.kt)("a",{parentName:"p",href:"/docs/explanations/features/targeted-log-levels"},"dynamic log levels")," with your normal Rails logger calls."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Please read the ",(0,l.kt)("a",{parentName:"p",href:"/docs/sdks/ruby#special-considerations-with-forking-servers-like-puma--unicorn-that-use-workers"},"Puma/Unicorn")," notes for special considerations with forking servers.")),(0,l.kt)("p",null,"Now we can start adjusting log levels. You can set and tweak these on-the-fly in the Prefab web app.\nLet's set the root level logger to ",(0,l.kt)("inlineCode",{parentName:"p"},"DEBUG")," in development."),(0,l.kt)("p",null,"Our results speak for themselves. You can see that we've enabled debug for the prefab internals, rails internals and our application code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'DEBUG 2022-09-06 13:01:54 -0400: cloud.prefab.client.sse:  Received event: #<struct SSE::StreamEvent type=:message, id=nil, last_event_id=nil>\nDEBUG 2022-09-06 13:01:54 -0400: cloud.prefab.client.load_configs:  Checkpoint with highwater id 16621316872267098 from sse. No changes.\nDEBUG 2022-09-06 13:02:03 -0400:  active_support.log_subscriber.debug:    (1.0ms)  SELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC\nDEBUG 2022-09-06 13:02:03 -0400:  active_record.log_subscriber.log_query_source:   \u21b3 /Users/...\nWARN  2022-09-06 13:02:03 -0400:  app.controllers.prefab_controller.index: warn level logging\nINFO  2022-09-06 13:02:03 -0400:  app.controllers.prefab_controller.index: info level logging\nDEBUG 2022-09-06 13:02:03 -0400:  app.controllers.prefab_controller.index: debug level logging\nDEBUG 2022-09-06 13:02:03 -0400:  active_record.log_subscriber.log_query_source:   \u21b3 app/views/layouts/application.html.haml:47\nINFO  2022-09-06 13:05:17 -0400:  lograge.log_subscriber.process_action: method=GET path=/prefab format=html controller=PrefabController action=index status=200 duration=151.10 view=141.43 db=6.20\n')),(0,l.kt)("p",null,"If we set our levels to ",(0,l.kt)("inlineCode",{parentName:"p"},"INFO"),", we see much less logging."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"INFO  2022-09-06 13:05:17 -0400:  app.controllers.prefab_controller.index: info level logging\nINFO  2022-09-06 13:05:17 -0400:  lograge.log_subscriber.process_action: method=GET path=/prefab format=html controller=PrefabController action=index status=200 duration=151.10 view=141.43 db=6.20\n")),(0,l.kt)("p",null,"Now we are free to adjust our log levels, down to the controller or method level in real-time. Invaluable for debugging!"),(0,l.kt)("h3",{id:"targeted-log-levels"},"Targeted Log Levels"),(0,l.kt)("p",null,"You can use ",(0,l.kt)("a",{parentName:"p",href:"/docs/explanations/features/targeted-log-levels"},"Targeting")," to change your log levels based on the current user/request/device context using our ",(0,l.kt)("a",{parentName:"p",href:"/docs/explanations/features/rules-and-segmentation"},"rules")," engine."))}u.isMDXComponent=!0}}]);