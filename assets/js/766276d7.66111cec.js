"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[749],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),g=l,f=u["".concat(s,".").concat(g)]||u[g]||d[g]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(3117),l=(n(7294),n(3905));const a={title:"Dynamic Log Levels",sidebar_label:"Dynamic Log Levels"},o=void 0,i={unversionedId:"python-sdk/dynamic_log_levels",id:"python-sdk/dynamic_log_levels",title:"Dynamic Log Levels",description:"Setting Dynamic Log Levels",source:"@site/docs/python-sdk/dynamic_log_levels.md",sourceDirName:"python-sdk",slug:"/python-sdk/dynamic_log_levels",permalink:"/docs/python-sdk/dynamic_log_levels",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/python-sdk/dynamic_log_levels.md",tags:[],version:"current",frontMatter:{title:"Dynamic Log Levels",sidebar_label:"Dynamic Log Levels"},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/docs/python-sdk/python"},next:{title:"JavaScript Client",permalink:"/docs/javascript"}},s={},c=[{value:"Setting Dynamic Log Levels",id:"setting-dynamic-log-levels",level:2},{value:"Trace IDs",id:"trace-ids",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"setting-dynamic-log-levels"},"Setting Dynamic Log Levels"),(0,l.kt)("p",null,"A simple example here is worth a million words."),(0,l.kt)("p",null,"First add a class."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class PrefabLogTest:\n    def run(self, client):\n        client.logger().warning("warn level logging")\n        client.logger().info("info level logging")\n        client.logger().debug("debug level logging")\n')),(0,l.kt)("p",null,"By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"PrefabCloudPython"),"'s global log level is configured at ",(0,l.kt)("inlineCode",{parentName:"p"},"warn"),", so running ",(0,l.kt)("inlineCode",{parentName:"p"},"PrefabLogTest().run(client)")," we would only see"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'12:01:16.808 [warn ] warning        source="prefab_log_test.warning"\n')),(0,l.kt)("p",null,"But we can change the final output by adjusting log levels."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"#.prefab.default.config.yaml\nlog-level:\n  prefab_log_test: debug\n")),(0,l.kt)("p",null,"Our results speak for themselves. You can see that we've enabled debug for any logging done in an instance of the ",(0,l.kt)("inlineCode",{parentName:"p"},"PrefabLogTest")," class"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'12:01:16.807 [debug ] debug         source="prefab_log_test"\n12:01:16.807 [info  ] info          source="prefab_log_test"\n12:01:16.808 [warn  ] warn          source="prefab_log_test"\n')),(0,l.kt)("p",null,"We can also set the global ",(0,l.kt)("inlineCode",{parentName:"p"},"log-level")," to reduce logging"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"#.prefab.default.config.yaml\nlog-level:\n  _: info\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'12:01:16.807 [info  ] info          source="prefab_log_test"\n12:01:16.808 [warn  ] warn          source="prefab_log_test"\n')),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If the values are in your ",(0,l.kt)("inlineCode",{parentName:"p"},".prefab.default.config.yaml")," you'll need to restart the server to see new values (",(0,l.kt)("a",{parentName:"p",href:"/docs/explanations/defaults"},"learn more about defaults"),"). If you change these values on the server, they will update automatically.")),(0,l.kt)("p",null,"Now we are free to adjust our log levels, down to the controller or method level in realtime. Invaluable for debugging!"),(0,l.kt)("h3",{id:"trace-ids"},"Trace IDs"),(0,l.kt)("p",null,"A final trick to share is adding in the concept of ",(0,l.kt)("inlineCode",{parentName:"p"},"trace-ids"),". This isn't a new feature per-se, it's really just a cool\nway to use regular Prefab config. To do it, we can just create a new string config called trace-ids. Put in a comma delimitted list of user ids.\nThen look for this value and only log if our current user is in the list."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'trace_ids = client.get("trace-ids").split(",")\n\nif to_string(user_id) in trace_ids:\n    client.logger().debug("very detailed logging")\n')),(0,l.kt)("p",null,"Enjoy!"))}d.isMDXComponent=!0}}]);