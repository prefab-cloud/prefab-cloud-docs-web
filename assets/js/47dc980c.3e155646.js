"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[8715],{1444:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=i(4848),l=i(8453);const s={title:"Elixir"},a=void 0,o={id:"sdks/elixir",title:"Elixir",description:"Getting Started with the Elixir SDK",source:"@site/docs/sdks/elixir.md",sourceDirName:"sdks",slug:"/sdks/elixir",permalink:"/docs/sdks/elixir",draft:!1,unlisted:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/sdks/elixir.md",tags:[],version:"current",frontMatter:{title:"Elixir"},sidebar:"tutorialSidebar",previous:{title:"SDKs",permalink:"/docs/category/sdks"},next:{title:"Go",permalink:"/docs/sdks/go"}},t={},c=[{value:"Getting Started with the Elixir SDK",id:"getting-started-with-the-elixir-sdk",level:2},{value:"Configure Options",id:"configure-options",level:2},{value:"Available options",id:"available-options",level:3},{value:"Initialize Client",id:"initialize-client",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Defaults",id:"defaults",level:3},{value:"Getting Started",id:"getting-started",level:3},{value:"Feature Flags",id:"feature-flags",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Logging",id:"logging",level:2},{value:"Targeted Log Levels",id:"targeted-log-levels",level:3},{value:"Log levels",id:"log-levels",level:3},{value:"Local Overrides",id:"local-overrides",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Testing",id:"testing",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"getting-started-with-the-elixir-sdk",children:"Getting Started with the Elixir SDK"}),"\n",(0,r.jsxs)(n.admonition,{type:"caution",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Note: This library is under active development and not quite ready for production usage"})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://forms.gle/BuAwqqmEDxfEybkN6",children:"Sign up to be notified when this library releases"})})]}),"\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"prefab"})," to your mix dependencies"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'# mix.exs\ndefp deps do\n  [\n    ...\n    {:prefab, "~> 0.1.0"},\n    ...\n  ]\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configure-options",children:"Configure Options"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'options = Prefab.Options.new(\n  api_key: "SDK-your-api-key",\n  prefab_api_url: "https://api.prefab.cloud",\n  prefab_grpc_url: "grpc.prefab.cloud:443"\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To avoid passing your API key in directly in code, we recommend setting up your\n",(0,r.jsx)(n.code,{children:"config/*.exs"})," files to read that value from ENV"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'# config/*.exs\nconfig :prefab,\n  api_key: System.get_env("PREFAB_API_KEY"),\n  api_url: System.get_env("PREFAB_API_URL", "https://api.staging-prefab.cloud"),\n  grpc_url: System.get_env("PREFAB_GRPC_URL", "grpc.staging-prefab.cloud:443")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"available-options",children:"Available options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"api_key"})," - your prefab.cloud SDK API key"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prefab_api_url"})," - the API endpoint your API key has been created for (i.e. ",(0,r.jsx)(n.code,{children:"https://api.prefab.cloud"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prefab_grpc_url"})," - the gRPC endpoint (including port) you wish to connect to (i.e. ",(0,r.jsx)(n.code,{children:"grpc.prefab.cloud:443"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"namespace"})," - an optional namespace to define your client's scope when looking up config"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prefab_datasources"})," - one of ",(0,r.jsx)(n.code,{children:":all"})," (default) or ",(0,r.jsx)(n.code,{children:":local_only"}),", determines whether to fetch data from remote\nsources or use only local data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prefab_config_classpath_dir"})," - the directory from which to load locally defined configuration. This data\nwill be overwritten by data pulled from remote sources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prefab_config_override_dir"})," - the directory from which to load local override data. Any data found will be\nloaded overtop of data pulled from remote sources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prefab_envs"})," - one or more environment names from which to load local configuration and overrides.\nSee ",(0,r.jsx)(n.a,{href:"#module-local-config-and-overrides",children:"Local config and overrides"})," below for additional information."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"initialize-client",children:"Initialize Client"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:"client = Prefab.Client.new(options)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Unless your options are configured to run using only local data, the client will attempt to connect to\nthe various remote data sources and begin syncing data to a local store."}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.h3,{id:"defaults",children:"Defaults"}),"\n",(0,r.jsxs)(n.p,{children:["Here we ask for the value of a config named max-jobs-per-second, and we specify\n",(0,r.jsx)(n.code,{children:"10"})," as a default value if no value is available."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'Prefab.Client.get(client, "max-jobs-per-second", default: 10) # => 10\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If no default is provided, the return value will be ",(0,r.jsx)(n.code,{children:"nil"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'Prefab.Client.get(client, "max-jobs-per-second") # => nil\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["If you would prefer your application raise an error if no value is found\nwhen no default is provided, you can use ",(0,r.jsx)(n.code,{children:"get!"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'# raises a Prefab.Errors.MissingDefaultError\nPrefab.Client.get!(client, "max-jobs-per-second")\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(n.p,{children:["Now create a config named ",(0,r.jsx)(n.code,{children:"my-first-int-config"})," in the Prefab UI. Set a default\nvalue to 50 and sync your change to the API."]}),"\n",(0,r.jsxs)(n.p,{children:["Add a feature flag named ",(0,r.jsx)(n.code,{children:"my-first-feature-flag"})," in the Prefab UI. Add boolean\nvariants of ",(0,r.jsx)(n.code,{children:"true"})," and ",(0,r.jsx)(n.code,{children:"false"}),". Set the inactive variant to false, make the flag\nactive and add a rule of type ",(0,r.jsx)(n.code,{children:"ALWAYS_TRUE"})," with the variant to serve as ",(0,r.jsx)(n.code,{children:"true"}),".\nRemember to sync your change to the API."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'config_key = "my-first-int-config"\nIO.puts("#{config_key}: #{Prefab.Client.get(client, config_key)}")\n\nff_key = "my-first-feature-flag"\nIO.puts("#{ff_key}: #{Prefab.Client.enabled?(client, ff_key)}")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Run the code above and you should see:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"my-first-int-config is: 50\nmy-first-feature-flag is: true\n"})}),"\n",(0,r.jsx)(n.p,{children:"Congrats! You're ready to rock!"}),"\n",(0,r.jsx)(n.h2,{id:"feature-flags",children:"Feature Flags"}),"\n",(0,r.jsxs)(n.p,{children:["Feature flags become more powerful when we give the flag evaluation ",(0,r.jsx)(n.a,{href:"/docs/explanations/features/rules-and-segmentation",children:"rules"})," more information to work with."]}),"\n",(0,r.jsx)(n.p,{children:"We do this by providing a lookup key and identity attributes."}),"\n",(0,r.jsxs)(n.p,{children:["The lookup key serves two purposes. First, it will be the unique key that helps us\ntarget a specific user using ",(0,r.jsx)(n.code,{children:"Lookup Key In"})," when evaluating a flag."]}),"\n",(0,r.jsx)(n.p,{children:"Second, this key is used to make sure that percent rollout evaluations are\nconsistently applied."}),"\n",(0,r.jsxs)(n.p,{children:["Attributes come into play when using the ",(0,r.jsx)(n.code,{children:"Property Is One Of"})," and similar rule\ncriteria."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'lookup_key = "user-1234"\nidentity_attributes = [\n                        team_id: 432,\n                        user_id: 123,\n                        subscription_level: \'pro\',\n                        email: "alice@example.com"\n                      ]\nresult = Prefab.Client.enabled?(\n  client,\n  "my-first-feature-flag",\n  lookup_key: lookup_key,\n  attributes: identity_attributes\n)\n\nIO.puts("my-first-feature-flag is: #{result} for #{lookup_key}")\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["How you choose the ",(0,r.jsx)(n.code,{children:"tracking_id"})," for your user is up to you, but we have some suggestions and we would generally\ndiscourage\n",(0,r.jsx)(n.code,{children:"user.id"})," unless you are positive you don't have anonymous users. See the section on ",(0,r.jsx)(n.a,{href:"/docs/how-tos/tracking-ids",children:"Tracking IDs"})," for our suggestion."]})}),"\n",(0,r.jsxs)(n.p,{children:["Feature flags don't have to return just true or false. You can get other data types using ",(0,r.jsx)(n.code,{children:"get"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'Prefab.Client.get(client, "ff-with-string", default_string_value)\nPrefab.Client.get(client, "ff-with-int", default_int_value)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"namespaces",children:"Namespaces"}),"\n",(0,r.jsx)(n.p,{children:"Namespaces allow you to share config between many applications while still allowing you to override when necessary."}),"\n",(0,r.jsxs)(n.p,{children:["For instance, let's assume that all our code shares an HTTP library. We can configure the HTTP library to get its retry\ncount & timeout duration from our config store. We'll set ",(0,r.jsx)(n.code,{children:"http.connection.retries"})," and ",(0,r.jsx)(n.code,{children:"http.connection.timeout"})," in the\ndefault namespace."]}),"\n",(0,r.jsx)(n.p,{children:"All of our apps should initialize their config store in a namespace. For instance our User service can initialize\nwith:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'options = Prefab.Options.new(\n  namespace: "services.user_service.web"\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:'Prefab config will find the "closest" matching config when the UserService goes to look for a value of\nhttp.connection.timeout.'}),"\n",(0,r.jsxs)(n.p,{children:["If our service namespace is ",(0,r.jsx)(n.code,{children:"services.user-service.web"})," it will match overrides in namespaces ",(0,r.jsx)(n.code,{children:"services"}),"\n, ",(0,r.jsx)(n.code,{children:"services.user_service"}),"\nand ",(0,r.jsx)(n.code,{children:"services.user_service.web"}),", but not ",(0,r.jsx)(n.code,{children:"services.user_service.cron"})," or ",(0,r.jsx)(n.code,{children:"services.user_service.web.tools"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's imagine that the ",(0,r.jsx)(n.code,{children:"UserService"})," starts to go down because too many requests are timing out to a 3rd party service. We\ncan quickly reduce the ",(0,r.jsx)(n.code,{children:"http.connection.timeout"})," for our ",(0,r.jsx)(n.code,{children:"services.user_service"})," namespace and solve the issue without\npushing code or restarting."]}),"\n",(0,r.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,r.jsxs)(n.p,{children:["Prefab's Elixir Client comes with a powerful upgrade to the default Elixir ",(0,r.jsx)(n.code,{children:"Logger"})," to provide dynamic log levels."]}),"\n",(0,r.jsxs)(n.p,{children:["To use it, use the logging functions included in the ",(0,r.jsx)(n.code,{children:"Prefab.Client"})," public API"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:"Prefab.Client.debug(client, message)\nPrefab.Client.info(client, message)\nPrefab.Client.warning(client, message)\nPrefab.Client.error(client, message)\nPrefab.Client.critical(client, message)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can now control logging at any level of your stack. For convenience, we'll set these as local defaults in ",(0,r.jsx)(n.code,{children:".prefab.default.config.yaml"})," (",(0,r.jsx)(n.a,{href:"/docs/explanations/concepts/defaults",children:"learn more"}),") but you can set and tweak these on-the-fly in the Prefab web app."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .prefab.default.config.yaml\nlog-level.app_web.controllers.my_controller: info\nlog-level.app_web.controllers.my_controller.index: warning\nlog-level.app_web.controllers.my_controller.show: debug\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:'defmodule AppWeb.MyController do\n  ...\n  def index(conn) do\n    Prefab.Client.warning(conn.prefab_client, "shown")\n    Prefab.Client.info(conn.prefab_client, "disabled")\n    Prefab.Client.debug(conn.prefab_client, "disabled")\n  end\n\n  def show(conn, _) do\n    Prefab.Client.warning(conn.prefab_client, "shown")\n    Prefab.Client.info(conn.prefab_client, "shown")\n    Prefab.Client.debug(conn.prefab_client, "shown")\n  end\n\n  def edit(conn, _) do\n    Prefab.Client.warning(conn.prefab_client, "shown")\n    Prefab.Client.info(conn.prefab_client, "shown")\n    Prefab.Client.debug(conn.prefab_client, "disabled")\n  end\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"targeted-log-levels",children:"Targeted Log Levels"}),"\n",(0,r.jsxs)(n.p,{children:["You can use ",(0,r.jsx)(n.a,{href:"/docs/explanations/features/targeted-log-levels",children:"Targeting"})," to change your log levels based on the current user/request/device context using our ",(0,r.jsx)(n.a,{href:"/docs/explanations/features/rules-and-segmentation",children:"rules"})," engine."]}),"\n",(0,r.jsx)(n.h3,{id:"log-levels",children:"Log levels"}),"\n",(0,r.jsxs)(n.p,{children:["To be as language agnostic as possible, ",(0,r.jsx)(n.code,{children:"Prefab"})," provides a standardized\nsubset of log levels that can be mapped to language-specific log levels.\nThe language-agnostic levels are the levels that should be set in the Prefab\nUI or in your local overrides. The list below shows the mappings from Prefab\nlog levels to Elixir log levels"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:"Prefab => Elixir\n--------------------\ndebug  => :debug\ninfo   => :info\nwarn   => :warning\nerror  => :error\nfatal  => :critical\n"})}),"\n",(0,r.jsx)(n.h2,{id:"local-overrides",children:"Local Overrides"}),"\n",(0,r.jsxs)(n.p,{children:["It can be very useful to modify your defaults locally without changing the defaults file or values in the API. To do\nthis, add a file in your home directory or classpath called ",(0,r.jsx)(n.code,{children:".prefab.default.config.yaml"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .prefab.default.config.yaml\nmycorp.auth.api.url: "auth.staging.mycorp.com"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'#~/.prefab.default.config.yaml\nmycorp.auth.api.url: "localhost:9090"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Prefab will first load the defaults, then merge the remote API values over the top, and finally it will apply the overrides file on\ntop of those values."}),"\n",(0,r.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,r.jsxs)(n.p,{children:["You can control the Prefab client's log level by changing the configuration value of ",(0,r.jsx)(n.code,{children:"log-level.prefab"}),". In the rare\ncase that you are trying to debug issues that occur before this config file has been read, set env var"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"PREFAB_LOG_CLIENT_BOOTSTRAP_LOG_LEVEL = debug\n"})}),"\n",(0,r.jsxs)(n.p,{children:["By default this level is set to ",(0,r.jsx)(n.code,{children:":warning"})]}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsxs)(n.p,{children:["Specify ",(0,r.jsx)(n.code,{children:"LOCAL_ONLY"})," and use your ",(0,r.jsx)(n.a,{href:"/docs/explanations/architecture/bootstrapping",children:"config.yaml file"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-elixir",children:"options = Prefab.Options.new(data_sources: :local_only)\n\nclient = Prefab.Client.new(options)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(6540);const l={},s=r.createContext(l);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);