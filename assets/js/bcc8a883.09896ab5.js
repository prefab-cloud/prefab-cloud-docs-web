"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[551],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(a),f=r,b=d["".concat(s,".").concat(f)]||d[f]||p[f]||l;return a?n.createElement(b,o(o({ref:t},c),{},{components:a})):n.createElement(b,o({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>f});var n=a(7462),r=a(7294),l=a(6010),o=a(2389),i=a(7392),s=a(7094),u=a(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,a;const{lazy:o,block:d,defaultValue:f,values:b,groupId:m,className:h}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=b?b:v.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,i.l)(y,((e,t)=>e.value===t.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===f?f:null!=(t=null!=f?f:null==(a=v.find((e=>e.props.default)))?void 0:a.props.value)?t:v[0].props.value;if(null!==k&&!y.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:N}=(0,s.U)(),[O,T]=(0,r.useState)(k),x=[],{blockElementScrollPositionUntilNextRender:D}=(0,u.o5)();if(null!=m){const e=w[m];null!=e&&e!==O&&y.some((t=>t.value===e))&&T(e)}const P=e=>{const t=e.currentTarget,a=x.indexOf(t),n=y[a].value;n!==O&&(D(t),T(n),null!=m&&N(m,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=x.indexOf(e.currentTarget)+1;a=null!=(n=x[t])?n:x[0];break}case"ArrowLeft":{var r;const t=x.indexOf(e.currentTarget)-1;a=null!=(r=x[t])?r:x[x.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},h)},y.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>x.push(e),onKeyDown:E,onFocus:P,onClick:P},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":O===t})}),null!=a?a:t)}))),o?(0,r.cloneElement)(v.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function f(e){const t=(0,o.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},1401:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var n=a(7462),r=(a(7294),a(3905)),l=a(5488),o=a(5162);const i={title:"Defaults",sidebar_label:"Defaults",sidebar_position:3},s=void 0,u={unversionedId:"explanations/defaults",id:"explanations/defaults",title:"Defaults",description:"The Question Of Defaults",source:"@site/docs/explanations/defaults.md",sourceDirName:"explanations",slug:"/explanations/defaults",permalink:"/prefab-cloud-docs-web/docs/explanations/defaults",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/explanations/defaults.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Defaults",sidebar_label:"Defaults",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Bootstrapping",permalink:"/prefab-cloud-docs-web/docs/explanations/bootstrapping"},next:{title:"Rules and Segmentation",permalink:"/prefab-cloud-docs-web/docs/explanations/rules-and-segmentation"}},c={},p=[{value:"The Question Of Defaults",id:"the-question-of-defaults",level:2},{value:"Setting OnNoDefault Behavior",id:"setting-onnodefault-behavior",level:2},{value:"Deleting Values",id:"deleting-values",level:2}],d={toc:p};function f(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"the-question-of-defaults"},"The Question Of Defaults"),(0,r.kt)("p",null,"Let's look at a basic example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'$prefab.get("my-int")\n')),(0,r.kt)("p",null,"If we've created a value for the key of ",(0,r.kt)("inlineCode",{parentName:"p"},"my-int"),", the behavior here is obvious. But what should happen if you request a key that\ndoesn't exist?"),(0,r.kt)("p",null,"Broadly, we've got two options. We can:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Return nil"),(0,r.kt)("li",{parentName:"ol"},"Throw an error")),(0,r.kt)("p",null,"Neither of those sound great, so an alternative path is to make our users specify a default value inline every time they ask for a results. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'$prefab.get("my-int", 30)\n')),(0,r.kt)("p",null,"This works, but can lead to messy redundancy if we are accessing the same configuration from many locations. "),(0,r.kt)("p",null,"Prefab's preferred approach is to use a defaults file to share these default values. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"#.prefab.default.config.yaml\nmy-int: 30\n")),(0,r.kt)("p",null,"With our default file on the classpath, we can now simply write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'$prefab.get("my-int")\n')),(0,r.kt)("p",null,"and be sure that if the key isn't available we will still have a value."),(0,r.kt)("h2",{id:"setting-onnodefault-behavior"},"Setting OnNoDefault Behavior"),(0,r.kt)("p",null,"In order to encourage defaults to be set for all configuration values, if a default is not found, Prefab defaults to throwing a\n",(0,r.kt)("inlineCode",{parentName:"p"},"NoDefaultValue")," error, even if there is a live value. The benefits of this are twofold. First, your code is very unlikely to make\nit to production in a state where there may be undefined behavior. The second benefit is that you now have an easy to read file\nwith all of your configuration keys in one place."),(0,r.kt)("p",null,"If this behavior isn't what you want, you can change this and have Prefab happily return nils by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"onNoDefault")," in your initializer."),(0,r.kt)(l.Z,{groupId:"lang",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ruby",label:"Ruby",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"options = Prefab::Options.new(\n  on_no_default: Prefab::Options::ON_NO_DEFAULT::RETURN_NIL ,\n)\n$prefab = Prefab.initialize(options)\n"))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Singleton\n@Provides\npublic Prefab getClient(){\n    PrefabOptions options=new PrefabOptions.Builder();\n    options.setOnNoDefault(PrefabOptions.OnNoDefault.RETURN_NIL);\n    return new Prefab(options.build());\n}\n")))),(0,r.kt)("h2",{id:"deleting-values"},"Deleting Values"),(0,r.kt)("p",null,"The Prefab clients will sometimes return nil even in the default mode. This situation occurs if you have deleted the keys in the Prefab UI.\nA deleted key value is sent down to the clients as a tombstone and this tombstone takes precedence over default values as indicated in the\n",(0,r.kt)("a",{parentName:"p",href:"/prefab-cloud-docs-web/docs/explanations/bootstrapping"},"config load order")," doc."))}f.isMDXComponent=!0}}]);