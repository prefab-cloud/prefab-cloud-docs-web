"use strict";(self.webpackChunkprefab_cloud_docs_web=self.webpackChunkprefab_cloud_docs_web||[]).push([[265],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),f=r,m=c["".concat(s,".").concat(f)]||c[f]||d[f]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1077:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={title:"Ruby",sidebar_position:1},o=void 0,l={unversionedId:"ruby-sdk/ruby",id:"ruby-sdk/ruby",title:"Ruby",description:"Getting Started With the Ruby SDK",source:"@site/docs/ruby-sdk/ruby.md",sourceDirName:"ruby-sdk",slug:"/ruby-sdk/ruby",permalink:"/docs/ruby-sdk/ruby",draft:!1,editUrl:"https://github.com/prefab-cloud/prefab-cloud-docs-web/tree/main/docs/ruby-sdk/ruby.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Ruby",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Ruby SDK",permalink:"/docs/category/ruby-sdk"},next:{title:"Dynamic Log Levels",permalink:"/docs/ruby-sdk/dynamic-log-levels"}},s={},p=[{value:"Getting Started With the Ruby SDK",id:"getting-started-with-the-ruby-sdk",level:2},{value:"Initialize Client",id:"initialize-client",level:2},{value:"Options",id:"options",level:3},{value:"Definitions of those options",id:"definitions-of-those-options",level:4},{value:"Rails Applications",id:"rails-applications",level:3},{value:"Special Considerations with Forking servers like Puma &amp; Unicorn that use workers",id:"special-considerations-with-forking-servers-like-puma--unicorn-that-use-workers",level:4},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Defaults",id:"defaults",level:3},{value:"Your first config and flag",id:"your-first-config-and-flag",level:3},{value:"Feature Flags",id:"feature-flags",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Local Overrides",id:"local-overrides",level:2},{value:"Emergencies",id:"emergencies",level:2},{value:"Using Prefab For Rollouts",id:"using-prefab-for-rollouts",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Testing",id:"testing",level:2},{value:"Example Test",id:"example-test",level:3},{value:"Client Initialization Options",id:"client-initialization-options",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=u("Tabs"),d=u("TabItem"),f={toc:p},m="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"getting-started-with-the-ruby-sdk"},"Getting Started With the Ruby SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," gem install prefab-cloud-ruby\n")),(0,r.kt)("h2",{id:"initialize-client"},"Initialize Client"),(0,r.kt)("p",null,"If you set ",(0,r.kt)("inlineCode",{parentName:"p"},"PREFAB_API_KEY")," as an environment variable, initializing the client is as easy as"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"$prefab = Prefab::Client.new # reads PREFAB_API_KEY env var\n")),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"$prefab.log.info")," (and ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warn"),", etc.) to use ",(0,r.kt)("a",{parentName:"p",href:"./dynamic-log-levels"},"dynamic log levels"),"."),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("p",null,"The full options are at the end of this doc, but here's some highlights:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"options = Prefab::Options.new(\n  collect_evaluation_summaries: true,\n  collect_logger_counts: true,\n  context_upload_mode: :periodic_example,\n  on_init_failure: Prefab::Options::ON_INITIALIZATION_FAILURE::RAISE,\n  prefab_datasources: Prefab::Options::DATASOURCES::ALL,\n)\n\n$prefab = Prefab::Client.new(options)\n")),(0,r.kt)("h4",{id:"definitions-of-those-options"},"Definitions of those options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"collect_evaluation_summaries"),(0,r.kt)("td",{parentName:"tr",align:null},"Send counts of config/flag evaluation results back to Prefab to view in web app"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"collect_logger_counts"),(0,r.kt)("td",{parentName:"tr",align:null},"Send counts of logger usage back to Prefab to power log-levels configuration screen"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"context_upload_mode"),(0,r.kt)("td",{parentName:"tr",align:null},'Upload either context "shapes" (the names and data types your app uses in prefab contexts) or periodically send full example contexts'),(0,r.kt)("td",{parentName:"tr",align:null},":periodic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"on_init_failure"),(0,r.kt)("td",{parentName:"tr",align:null},"Choose to crash or continue with local data only if unable to fetch config data from prefab at startup"),(0,r.kt)("td",{parentName:"tr",align:null},"RAISE (crash)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"prefab_datasources"),(0,r.kt)("td",{parentName:"tr",align:null},"Use either only-local data or local + API data"),(0,r.kt)("td",{parentName:"tr",align:null},"ALL")))),(0,r.kt)("h3",{id:"rails-applications"},"Rails Applications"),(0,r.kt)("p",null,"Initializing Prefab in your ",(0,r.kt)("inlineCode",{parentName:"p"},"application.rb")," will allow you to reference dynamic configuration in your environment (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"staging.rb"),") and initializers. This is useful for setting environment-specific config like your redis connection URL."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"#application.rb\nmodule MyApplication\n  class Application < Rails::Application\n    #...\n\n    $prefab = Prefab::Client.new\n    $prefab.set_rails_loggers\n  end\nend\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"$prefab.set_rails_loggers")," wraps the Rails logger to allow using ",(0,r.kt)("a",{parentName:"p",href:"./dynamic-log-levels"},"dynamic log levels")," with your normal Rails logger calls."),(0,r.kt)("p",null,"To make the best use of Prefab, we recommend setting ",(0,r.kt)("a",{parentName:"p",href:"../explanations/context"},"context")," in an ",(0,r.kt)("inlineCode",{parentName:"p"},"around_action")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplicationController"),". Setting this context for the life-cycle of the request means the Prefab logger can be aware of your user/etc. for ",(0,r.kt)("a",{parentName:"p",href:"../explanations/targeted-log-levels"},"targeted log levels")," and you won't have to explicitly pass context into your ",(0,r.kt)("inlineCode",{parentName:"p"},".enabled?")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".get")," calls."),(0,r.kt)("p",null,"e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"around_action do |_, block|\n  $prefab.with_context(prefab_context, &block)\nend\n\ndef prefab_context\n  {\n    device: {\n      mobile: mobile?\n      # ...\n    },\n  }.merge(prefab_user_context)\nend\n\ndef prefab_user_context\n  return {} unless current_user\n\n  {\n    key: current_user.tracking_id,\n    id: current_user.id,\n    email: current_user.email,\n    country: current_user.country,\n    # ...\n  }\nend\n")),(0,r.kt)("h4",{id:"special-considerations-with-forking-servers-like-puma--unicorn-that-use-workers"},"Special Considerations with Forking servers like Puma & Unicorn that use workers"),(0,r.kt)("p",null,"Many ruby web servers fork. In order to work properly we should have a Prefab Client running independently in each fork. You do not need to do this if you are only using threads and not workers.\nWe also need to set the reset the logger for ActionView and friends because those get set pre-fork."),(0,r.kt)(c,{groupId:"lang",mdxType:"Tabs"},(0,r.kt)(d,{value:"puma",label:"Puma",mdxType:"TabItem"},"If using workers in Puma, you can initialize inside an on_worker_boot hook in your puma.rb config file.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# puma.rb\non_worker_boot do\n  $prefab = $prefab.fork\n  $prefab.set_rails_loggers\nend\n"))),(0,r.kt)(d,{value:"unicorn",label:"Unicorn",mdxType:"TabItem"},"If using workers in Unicorn, you can initialize inside an after_fork hook in your unicorn.rb config file:",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# unicorn.rb\nafter_fork do |server, worker|\n  $prefab = $prefab.fork\n  $prefab.set_rails_loggers\nend\n")))),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("h3",{id:"defaults"},"Defaults"),(0,r.kt)("p",null,"It is a best practice to specify a default value for all configuration. This reduces the likelihood of exceptions due to\nnil values. Prefab encourages this practice by raising an error if you try to reference a value that is unset."),(0,r.kt)("p",null,"Here we ask for the value of a config named ",(0,r.kt)("inlineCode",{parentName:"p"},"max-jobs-per-second"),", and we specify ",(0,r.kt)("inlineCode",{parentName:"p"},"10")," as a default value if no value is available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'$prefab.get("max-jobs-per-second", 10) # => returns `10` if no value is available\n')),(0,r.kt)("p",null,"If we don't provide a default and no value is available, a ",(0,r.kt)("inlineCode",{parentName:"p"},"Prefab::Errors::MissingDefaultError")," error will be raised."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'$prefab.get("max-jobs-per-second") # => raises if no value is available\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can modify this behavior by setting the option ",(0,r.kt)("inlineCode",{parentName:"p"},"on_no_default")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Prefab::Options::ON_NO_DEFAULT::RETURN_NIL"))),(0,r.kt)("p",null,"You can specify defaults for your application by creating a file ",(0,r.kt)("inlineCode",{parentName:"p"},".prefab.default.config.yaml")),(0,r.kt)("p",null,"Add the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# .prefab.default.config.yaml\nlog-level.cloud.prefab: info\nmy-first-int-config: 30\nmy-first-feature-flag: false\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/explanations/defaults"},"Learn more about defaults"),"."),(0,r.kt)("h3",{id:"your-first-config-and-flag"},"Your first config and flag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'config_key = "my-first-int-config"\nputs "#{config_key} is: #{$prefab.get(config_key)}"\n\nflag_name = "my-first-feature-flag"\nputs "#{flag_name} is: #{$prefab.enabled? flag_name}"\n')),(0,r.kt)("p",null,"Run these and you should see the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"my-first-int-config is: 30\nmy-first-feature-flag is: false\n")),(0,r.kt)("p",null,"Now create a config named ",(0,r.kt)("inlineCode",{parentName:"p"},"my-first-int-config")," in the Prefab UI. Set a default value to 50 and sync your change to the\nAPI."),(0,r.kt)("p",null,"Add a feature flag named ",(0,r.kt)("inlineCode",{parentName:"p"},"my-first-feature-flag")," in the Prefab UI. Add boolean variants of ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),".\nSet the inactive variant to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", make the flag active and add a rule of type ",(0,r.kt)("inlineCode",{parentName:"p"},"ALWAYS_TRUE")," with the variant to serve\nas ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),".\nRemember to sync your change to the API."),(0,r.kt)("p",null,"Run your command again and you should see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"my-first-int-config is: 50\nmy-first-feature-flag is: true\n")),(0,r.kt)("p",null,"Congrats! You're ready to rock!"),(0,r.kt)("h2",{id:"feature-flags"},"Feature Flags"),(0,r.kt)("p",null,"Feature flags become more powerful when we give the flag evaluation rules more information to work with."),(0,r.kt)("p",null,"We do this by providing ",(0,r.kt)("a",{parentName:"p",href:"../explanations/context"},"context")," of the current user (and/or team, request, etc.)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"context = {\n  user: {\n    id: 123,\n    key: 'user-123',\n    subscription_level: 'pro',\n    email: \"alice@example.com\"\n  },\n  team: {\n    id: 432,\n    key: 'team-abc',\n  },\n  device: {\n    mobile: true,\n  }\n}\nresult = $prefab.enabled?(\"my-first-feature-flag\", context)\n\nputs \"my-first-feature-flag is: #{result} for #{context.inspect}\"\n")),(0,r.kt)("p",null,"Like config, feature flags don't have to return just true or false. You can get other data types using ",(0,r.kt)("inlineCode",{parentName:"p"},"get"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'$prefab.get("ff-with-string", default_string_value, context)\n$prefab.get("ff-with-int", default_int_value, context)\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Rather than passing your context in for your ",(0,r.kt)("inlineCode",{parentName:"p"},".enabled?")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".get")," calls, you can use an ",(0,r.kt)("inlineCode",{parentName:"p"},"around_action")," in Rails (see above) or ",(0,r.kt)("inlineCode",{parentName:"p"},"$prefab.with_context")," directly.")),(0,r.kt)("h2",{id:"namespaces"},"Namespaces"),(0,r.kt)("p",null,"Namespaces allow you to share config between many applications while still allowing you to override when necessary."),(0,r.kt)("p",null,"For instance, let's assume that all our code shares an HTTP library. We can configure the HTTP library to get its retry\ncount & timeout duration from our config store. We'll set ",(0,r.kt)("inlineCode",{parentName:"p"},"http.connection.retries")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"http.connection.timeout")," in the\ndefault namespace."),(0,r.kt)("p",null,"All of our apps should initialize their config store in a namespace. For instance our User service can initialize\nwith:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'options = Prefab::Options.new(\n  namespace: "services.user-service.web"\n)\n')),(0,r.kt)("p",null,'Prefab config will find the "closest" matching config when the UserService goes to look for a value of\nhttp.connection.timeout.'),(0,r.kt)("p",null,"If our service namespace is ",(0,r.kt)("inlineCode",{parentName:"p"},"services.user-service.web")," it will match overrides in namespaces ",(0,r.kt)("inlineCode",{parentName:"p"},"services"),"\n, ",(0,r.kt)("inlineCode",{parentName:"p"},"services.user-service"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"services.user-service.web"),", but not ",(0,r.kt)("inlineCode",{parentName:"p"},"services.user-service.cron")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"services.user-service.web.tools"),"."),(0,r.kt)("p",null,"Let's imagine that the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserService")," starts to go down because too many requests are timing out to a 3rd party service. We\ncan quickly reduce the ",(0,r.kt)("inlineCode",{parentName:"p"},"http.connection.timeout")," for our ",(0,r.kt)("inlineCode",{parentName:"p"},"services.user-service")," namespace and solve the issue without\npushing code or restarting."),(0,r.kt)("h2",{id:"local-overrides"},"Local Overrides"),(0,r.kt)("p",null,"It can be very useful to modify your defaults locally without changing the defaults file or values in the API. To do\nthis, add a file in your home directory or classpath called ",(0,r.kt)("inlineCode",{parentName:"p"},".prefab.default.config.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# .prefab.default.config.yaml\nmycorp.auth.api.url: "auth.staging.mycorp.com"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'#~/.prefab.default.config.yaml\nmycorp.auth.api.url: "localhost:9090"\n')),(0,r.kt)("p",null,"Prefab will first load the defaults. Then merge the API values over the top. Finally it will apply the overrides file on\ntop."),(0,r.kt)("h2",{id:"emergencies"},"Emergencies"),(0,r.kt)("p",null,"Prefab is designed to be extremely resilient. The client will try to pull live values from:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"A Fastly CDN backed by the API"),(0,r.kt)("li",{parentName:"ol"},"The Prefab API"),(0,r.kt)("li",{parentName:"ol"},"Prefab Streaming APIs")),(0,r.kt)("p",null,"This strategy ensures the utmost reliability for your clients being able to pull live values, even in the case of a\nmajor outage of the Prefab APIs."),(0,r.kt)("p",null,"But wait, there's more."),(0,r.kt)("p",null,"In the terrible occurrence that the Prefab APIs are down for an extended period of time, your services should be able to\nbootstrap themselves and load from the CDN, but you would be unable to modify configuration."),(0,r.kt)("h2",{id:"using-prefab-for-rollouts"},"Using Prefab For Rollouts"),(0,r.kt)("p",null,"So you've built a new pipeline and are hoping to slowly dial up how much traffic uses it. You've got two great ways to\ndo that with Prefab."),(0,r.kt)("p",null,"One approach is to simply use dynamic config. We can use a floating point number to specify the percent of traffic we\nwant to rollout to and then evaluate that against a random number to determine whether to run the new code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'if rand() < @config.get_float("percent-to-rollout")\n  do_new_pipeline\nend\n')),(0,r.kt)("p",null,"This approach works fine, but each evaluation of ",(0,r.kt)("inlineCode",{parentName:"p"},"rand()")," will get you a different result. Sometimes this is what you\nwant, but if you'd like the rollout to be sticky and keep server, requests, users in the new pipeline you may want to use a feature flag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'$prefab.enabled? "new-feature", { user: { tracking_id: user.tracking_id } }\n')),(0,r.kt)("h2",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,"You can control the Prefab client's log level by changing the configuration value of ",(0,r.kt)("inlineCode",{parentName:"p"},"log-level.cloud.prefab"),". In the rare\ncase that you are trying to debug issues that occur before this config file has been read, set env var"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"PREFAB_LOG_CLIENT_BOOTSTRAP_LOG_LEVEL = debug\n")),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Specify ",(0,r.kt)("inlineCode",{parentName:"p"},"LOCAL_ONLY")," and use your ",(0,r.kt)("a",{parentName:"p",href:"/docs/explanations/bootstrapping"},"config.yaml file"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"options = Prefab::Options.new(data_sources: LOCAL_ONLY)\n\n$prefab = Prefab::Client.initialize(options)\n")),(0,r.kt)("p",null,"If you need to test multiple scenarios that depend on a single config or feature key, you can use a mock or stub to change the Prefab value."),(0,r.kt)("h3",{id:"example-test"},"Example Test"),(0,r.kt)("p",null,"Imagine we want to test a ",(0,r.kt)("inlineCode",{parentName:"p"},"batches")," method on our ",(0,r.kt)("inlineCode",{parentName:"p"},"Job")," class. ",(0,r.kt)("inlineCode",{parentName:"p"},"batches")," depends on ",(0,r.kt)("inlineCode",{parentName:"p"},"job.batch.size")," and the value for ",(0,r.kt)("inlineCode",{parentName:"p"},"job.batch.size")," in our default config file is ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,r.kt)("p",null,"We can test how ",(0,r.kt)("inlineCode",{parentName:"p"},"batches")," performs with different values for ",(0,r.kt)("inlineCode",{parentName:"p"},"job.batch.size")," by mocking the return value of ",(0,r.kt)("inlineCode",{parentName:"p"},"$prefab.get"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Job < Array\n  def batches\n    slice_size = $prefab.get('job.batch.size')\n    each_slice(slice_size)\n  end\nend\n\nRSpec.describe Job do\n  describe '#batches' do\n    it 'returns batches of jobs' do\n      jobs = Job.new([1, 2, 3, 4, 5])\n\n      expect(jobs.batches.map(&:size)).to eq([3, 2])\n\n      allow($prefab).to receive(:get).with('job.batch.size').and_return(2)\n      expect(jobs.batches.map(&:size)).to eq([2, 2, 1])\n    end\n  end\nend\n")),(0,r.kt)("h2",{id:"client-initialization-options"},"Client Initialization Options"),(0,r.kt)("p",null,"For more control, you can initialize your client with options. Here are the defaults with explanations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"options = Prefab::Options.new(\n  api_key: ENV['PREFAB_API_KEY'],\n  logdev: $stdout,\n  namespace: '',\n  log_formatter: DEFAULT_LOG_FORMATTER,\n  log_prefix: nil,\n  prefab_api_url: ENV['PREFAB_API_URL'] || 'https://api.prefab.cloud',\n  on_no_default: ON_NO_DEFAULT::RAISE, # options :raise, :warn_and_return_nil,\n  initialization_timeout_sec: 10, # how long to wait before on_init_failure\n  on_init_failure: ON_INITIALIZATION_FAILURE::RAISE,\n  prefab_datasources: ENV['PREFAB_DATASOURCES'] == 'LOCAL_ONLY' ? DATASOURCES::LOCAL_ONLY : DATASOURCES::ALL,\n  prefab_config_override_dir: Dir.home,\n  prefab_config_classpath_dir: '.', # where to load local overrides\n  prefab_envs: ENV['PREFAB_ENVS'].nil? ? [] : ENV['PREFAB_ENVS'].split(','),\n  collect_logger_counts: true,\n  collect_max_paths: DEFAULT_MAX_PATHS,\n  collect_sync_interval: nil,\n  context_upload_mode: :periodic_example, # :periodic_example, :shape_only, :none\n  context_max_size: DEFAULT_MAX_EVAL_SUMMARIES,\n  collect_evaluation_summaries: true,\n  collect_max_evaluation_summaries: DEFAULT_MAX_EVAL_SUMMARIES,\n  allow_telemetry_in_local_mode: false\n)\n\n$prefab = Prefab::Client.new(options)\n")))}g.isMDXComponent=!0}}]);